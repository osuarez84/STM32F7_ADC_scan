
multi_channel_ADC_scan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020a8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080022a0  080022a0  000122a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080022e0  080022e0  000122e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080022e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000010c  2000000c  080022f0  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000118  080022f0  00020118  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000142ad  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002568  00000000  00000000  000342e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000066f3  00000000  00000000  0003684f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008e0  00000000  00000000  0003cf48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000be0  00000000  00000000  0003d828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000054b3  00000000  00000000  0003e408  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003d63  00000000  00000000  000438bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004761e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001930  00000000  00000000  0004769c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002288 	.word	0x08002288

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002288 	.word	0x08002288

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_InitTick+0x3c>)
{
 800054c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_InitTick+0x40>)
 8000550:	7818      	ldrb	r0, [r3, #0]
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f0 	udiv	r3, r3, r0
 800055a:	6810      	ldr	r0, [r2, #0]
 800055c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000560:	f000 fb50 	bl	8000c04 <HAL_SYSTICK_Config>
 8000564:	4604      	mov	r4, r0
 8000566:	b958      	cbnz	r0, 8000580 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000568:	2d0f      	cmp	r5, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	4602      	mov	r2, r0
 800056e:	4629      	mov	r1, r5
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 fb02 	bl	8000b7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_InitTick+0x44>)
 800057a:	4620      	mov	r0, r4
 800057c:	601d      	str	r5, [r3, #0]
 800057e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
 8000584:	20000000 	.word	0x20000000
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004

08000590 <HAL_Init>:
{
 8000590:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000592:	2003      	movs	r0, #3
 8000594:	f000 fae0 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ffd5 	bl	8000548 <HAL_InitTick>
  HAL_MspInit();
 800059e:	f001 fd3b 	bl	8002018 <HAL_MspInit>
}
 80005a2:	2000      	movs	r0, #0
 80005a4:	bd08      	pop	{r3, pc}
	...

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000002c 	.word	0x2000002c
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	2000002c 	.word	0x2000002c

080005cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005cc:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005ce:	4604      	mov	r4, r0
 80005d0:	2800      	cmp	r0, #0
 80005d2:	f000 8099 	beq.w	8000708 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80005d8:	b923      	cbnz	r3, 80005e4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005da:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005e0:	f001 fd4a 	bl	8002078 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005e6:	06db      	lsls	r3, r3, #27
 80005e8:	f100 808c 	bmi.w	8000704 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005f2:	f023 0302 	bic.w	r3, r3, #2
 80005f6:	f043 0302 	orr.w	r3, r3, #2
 80005fa:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80005fc:	4b43      	ldr	r3, [pc, #268]	; (800070c <HAL_ADC_Init+0x140>)
 80005fe:	685a      	ldr	r2, [r3, #4]
 8000600:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000604:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	6861      	ldr	r1, [r4, #4]
 800060a:	430a      	orrs	r2, r1
 800060c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800060e:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000610:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000612:	685a      	ldr	r2, [r3, #4]
 8000614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800061a:	685a      	ldr	r2, [r3, #4]
 800061c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000620:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000622:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000624:	685a      	ldr	r2, [r3, #4]
 8000626:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800062a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800062c:	685a      	ldr	r2, [r3, #4]
 800062e:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000630:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000632:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000634:	689a      	ldr	r2, [r3, #8]
 8000636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800063a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000640:	4933      	ldr	r1, [pc, #204]	; (8000710 <HAL_ADC_Init+0x144>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000642:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000644:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000646:	428a      	cmp	r2, r1
 8000648:	d050      	beq.n	80006ec <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800064a:	6899      	ldr	r1, [r3, #8]
 800064c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000650:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000652:	6899      	ldr	r1, [r3, #8]
 8000654:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000656:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000658:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000662:	689a      	ldr	r2, [r3, #8]
 8000664:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000666:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000668:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800066a:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800066c:	f022 0202 	bic.w	r2, r2, #2
 8000670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000672:	689a      	ldr	r2, [r3, #8]
 8000674:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000678:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800067a:	6a22      	ldr	r2, [r4, #32]
 800067c:	2a00      	cmp	r2, #0
 800067e:	d03d      	beq.n	80006fc <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000680:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000682:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000688:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800068a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800068c:	685a      	ldr	r2, [r3, #4]
 800068e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000692:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000694:	685a      	ldr	r2, [r3, #4]
 8000696:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800069a:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 800069c:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800069e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006a0:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006a6:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ac:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80006b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80006bc:	689a      	ldr	r2, [r3, #8]
 80006be:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006c2:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80006c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006ce:	689a      	ldr	r2, [r3, #8]
 80006d0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006d4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006d6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006da:	f023 0303 	bic.w	r3, r3, #3
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006e4:	2300      	movs	r3, #0
 80006e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006ea:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006ec:	689a      	ldr	r2, [r3, #8]
 80006ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006fa:	e7b4      	b.n	8000666 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000702:	e7ca      	b.n	800069a <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000704:	2001      	movs	r0, #1
 8000706:	e7ed      	b.n	80006e4 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000708:	2001      	movs	r0, #1
}
 800070a:	bd10      	pop	{r4, pc}
 800070c:	40012300 	.word	0x40012300
 8000710:	0f000001 	.word	0x0f000001

08000714 <HAL_ADC_Start_DMA>:
{
 8000714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000716:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 8000718:	2200      	movs	r2, #0
{
 800071a:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 800071c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800071e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000722:	2a01      	cmp	r2, #1
 8000724:	d065      	beq.n	80007f2 <HAL_ADC_Start_DMA+0xde>
 8000726:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000728:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 800072a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800072e:	68aa      	ldr	r2, [r5, #8]
 8000730:	07d2      	lsls	r2, r2, #31
 8000732:	d505      	bpl.n	8000740 <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000734:	68aa      	ldr	r2, [r5, #8]
 8000736:	07d0      	lsls	r0, r2, #31
 8000738:	d415      	bmi.n	8000766 <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 800073a:	2000      	movs	r0, #0
}
 800073c:	b003      	add	sp, #12
 800073e:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000740:	68aa      	ldr	r2, [r5, #8]
 8000742:	f042 0201 	orr.w	r2, r2, #1
 8000746:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000748:	4a2b      	ldr	r2, [pc, #172]	; (80007f8 <HAL_ADC_Start_DMA+0xe4>)
 800074a:	6810      	ldr	r0, [r2, #0]
 800074c:	4a2b      	ldr	r2, [pc, #172]	; (80007fc <HAL_ADC_Start_DMA+0xe8>)
 800074e:	fbb0 f0f2 	udiv	r0, r0, r2
 8000752:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000756:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8000758:	9a01      	ldr	r2, [sp, #4]
 800075a:	2a00      	cmp	r2, #0
 800075c:	d0ea      	beq.n	8000734 <HAL_ADC_Start_DMA+0x20>
      counter--;
 800075e:	9a01      	ldr	r2, [sp, #4]
 8000760:	3a01      	subs	r2, #1
 8000762:	9201      	str	r2, [sp, #4]
 8000764:	e7f8      	b.n	8000758 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 8000766:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000768:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800076c:	f020 0001 	bic.w	r0, r0, #1
 8000770:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000774:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000776:	686a      	ldr	r2, [r5, #4]
 8000778:	0552      	lsls	r2, r2, #21
 800077a:	d505      	bpl.n	8000788 <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800077c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800077e:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 8000782:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8000786:	6420      	str	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000788:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800078a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800078e:	d002      	beq.n	8000796 <HAL_ADC_Start_DMA+0x82>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000790:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000792:	f022 0206 	bic.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000796:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8000798:	2200      	movs	r2, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800079a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    __HAL_UNLOCK(hadc);   
 800079c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007a0:	4a17      	ldr	r2, [pc, #92]	; (8000800 <HAL_ADC_Start_DMA+0xec>)
 80007a2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80007a4:	4a17      	ldr	r2, [pc, #92]	; (8000804 <HAL_ADC_Start_DMA+0xf0>)
 80007a6:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80007a8:	4a17      	ldr	r2, [pc, #92]	; (8000808 <HAL_ADC_Start_DMA+0xf4>)
 80007aa:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80007b0:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007b2:	686a      	ldr	r2, [r5, #4]
 80007b4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80007b8:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80007ba:	68aa      	ldr	r2, [r5, #8]
 80007bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007c0:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80007c2:	460a      	mov	r2, r1
 80007c4:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80007c8:	f000 fad8 	bl	8000d7c <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_ADC_Start_DMA+0xf8>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f013 0f1f 	tst.w	r3, #31
 80007d4:	6823      	ldr	r3, [r4, #0]
 80007d6:	d108      	bne.n	80007ea <HAL_ADC_Start_DMA+0xd6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007d8:	6898      	ldr	r0, [r3, #8]
 80007da:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80007de:	d1ac      	bne.n	800073a <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007e0:	689a      	ldr	r2, [r3, #8]
 80007e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	e7a8      	b.n	800073c <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007ea:	4a09      	ldr	r2, [pc, #36]	; (8000810 <HAL_ADC_Start_DMA+0xfc>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d1a4      	bne.n	800073a <HAL_ADC_Start_DMA+0x26>
 80007f0:	e7f2      	b.n	80007d8 <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 80007f2:	2002      	movs	r0, #2
 80007f4:	e7a2      	b.n	800073c <HAL_ADC_Start_DMA+0x28>
 80007f6:	bf00      	nop
 80007f8:	20000008 	.word	0x20000008
 80007fc:	000f4240 	.word	0x000f4240
 8000800:	08000815 	.word	0x08000815
 8000804:	08000877 	.word	0x08000877
 8000808:	080009ad 	.word	0x080009ad
 800080c:	40012300 	.word	0x40012300
 8000810:	40012000 	.word	0x40012000

08000814 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000814:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000818:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800081c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800081e:	d124      	bne.n	800086a <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000826:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	6891      	ldr	r1, [r2, #8]
 800082c:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000830:	d117      	bne.n	8000862 <ADC_DMAConvCplt+0x4e>
 8000832:	6999      	ldr	r1, [r3, #24]
 8000834:	b9a9      	cbnz	r1, 8000862 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000836:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000838:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800083c:	d002      	beq.n	8000844 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800083e:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000840:	0549      	lsls	r1, r1, #21
 8000842:	d40e      	bmi.n	8000862 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000844:	6851      	ldr	r1, [r2, #4]
 8000846:	f021 0120 	bic.w	r1, r1, #32
 800084a:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800084c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800084e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000852:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000856:	04d2      	lsls	r2, r2, #19
 8000858:	d403      	bmi.n	8000862 <ADC_DMAConvCplt+0x4e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800085a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085c:	f042 0201 	orr.w	r2, r2, #1
 8000860:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fbd6 	bl	8002014 <HAL_ADC_ConvCpltCallback>
 8000868:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800086a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 800086c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4718      	bx	r3

08000874 <HAL_ADC_ConvHalfCpltCallback>:
 8000874:	4770      	bx	lr

08000876 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000876:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000878:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800087a:	f7ff fffb 	bl	8000874 <HAL_ADC_ConvHalfCpltCallback>
 800087e:	bd08      	pop	{r3, pc}

08000880 <HAL_ADC_LevelOutOfWindowCallback>:
 8000880:	4770      	bx	lr

08000882 <HAL_ADC_ErrorCallback>:
{
 8000882:	4770      	bx	lr

08000884 <HAL_ADC_IRQHandler>:
{
 8000884:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000886:	6803      	ldr	r3, [r0, #0]
{
 8000888:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800088a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800088c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800088e:	078d      	lsls	r5, r1, #30
 8000890:	d52b      	bpl.n	80008ea <HAL_ADC_IRQHandler+0x66>
 8000892:	0690      	lsls	r0, r2, #26
 8000894:	d529      	bpl.n	80008ea <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000896:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000898:	06d1      	lsls	r1, r2, #27
 800089a:	d403      	bmi.n	80008a4 <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800089c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800089e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008a2:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80008aa:	d117      	bne.n	80008dc <HAL_ADC_IRQHandler+0x58>
 80008ac:	69a2      	ldr	r2, [r4, #24]
 80008ae:	b9aa      	cbnz	r2, 80008dc <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80008b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008b2:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80008b6:	d002      	beq.n	80008be <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80008b8:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80008ba:	0552      	lsls	r2, r2, #21
 80008bc:	d40e      	bmi.n	80008dc <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	f022 0220 	bic.w	r2, r2, #32
 80008c4:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80008c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008cc:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008d0:	04db      	lsls	r3, r3, #19
 80008d2:	d403      	bmi.n	80008dc <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80008dc:	4620      	mov	r0, r4
 80008de:	f001 fb99 	bl	8002014 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80008e2:	6823      	ldr	r3, [r4, #0]
 80008e4:	f06f 0212 	mvn.w	r2, #18
 80008e8:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80008ee:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80008f0:	074d      	lsls	r5, r1, #29
 80008f2:	d532      	bpl.n	800095a <HAL_ADC_IRQHandler+0xd6>
 80008f4:	0610      	lsls	r0, r2, #24
 80008f6:	d530      	bpl.n	800095a <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008fa:	06d1      	lsls	r1, r2, #27
 80008fc:	d403      	bmi.n	8000906 <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80008fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000904:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800090c:	d11e      	bne.n	800094c <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800090e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000910:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000914:	d002      	beq.n	800091c <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000916:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8000918:	0552      	lsls	r2, r2, #21
 800091a:	d417      	bmi.n	800094c <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800091c:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800091e:	0555      	lsls	r5, r2, #21
 8000920:	d414      	bmi.n	800094c <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000922:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000924:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000928:	d110      	bne.n	800094c <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800092a:	69a2      	ldr	r2, [r4, #24]
 800092c:	b972      	cbnz	r2, 800094c <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000934:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800093c:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800093e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000940:	05d8      	lsls	r0, r3, #23
 8000942:	d403      	bmi.n	800094c <HAL_ADC_IRQHandler+0xc8>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000944:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800094c:	4620      	mov	r0, r4
 800094e:	f000 f8d9 	bl	8000b04 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000952:	6823      	ldr	r3, [r4, #0]
 8000954:	f06f 020c 	mvn.w	r2, #12
 8000958:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800095a:	6823      	ldr	r3, [r4, #0]
 800095c:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800095e:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000960:	07c9      	lsls	r1, r1, #31
 8000962:	d50f      	bpl.n	8000984 <HAL_ADC_IRQHandler+0x100>
 8000964:	0655      	lsls	r5, r2, #25
 8000966:	d50d      	bpl.n	8000984 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	07d8      	lsls	r0, r3, #31
 800096c:	d50a      	bpl.n	8000984 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800096e:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000970:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000976:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000978:	f7ff ff82 	bl	8000880 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800097c:	6823      	ldr	r3, [r4, #0]
 800097e:	f06f 0201 	mvn.w	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000984:	6823      	ldr	r3, [r4, #0]
 8000986:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000988:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800098a:	0689      	lsls	r1, r1, #26
 800098c:	d50d      	bpl.n	80009aa <HAL_ADC_IRQHandler+0x126>
 800098e:	0152      	lsls	r2, r2, #5
 8000990:	d50b      	bpl.n	80009aa <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000992:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000994:	f06f 0520 	mvn.w	r5, #32
    HAL_ADC_ErrorCallback(hadc);
 8000998:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800099a:	f042 0202 	orr.w	r2, r2, #2
 800099e:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009a0:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 80009a2:	f7ff ff6e 	bl	8000882 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80009a6:	6823      	ldr	r3, [r4, #0]
 80009a8:	601d      	str	r5, [r3, #0]
 80009aa:	bd38      	pop	{r3, r4, r5, pc}

080009ac <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80009ac:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80009ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80009b0:	2340      	movs	r3, #64	; 0x40
 80009b2:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80009b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 80009bc:	f7ff ff61 	bl	8000882 <HAL_ADC_ErrorCallback>
 80009c0:	bd08      	pop	{r3, pc}
	...

080009c4 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 80009c4:	2300      	movs	r3, #0
{
 80009c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80009c8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80009ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d071      	beq.n	8000ab6 <HAL_ADC_ConfigChannel+0xf2>
	if (sConfig->Channel > ADC_CHANNEL_9)
 80009d2:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 80009d4:	2301      	movs	r3, #1
 80009d6:	6804      	ldr	r4, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 80009d8:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80009da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80009de:	b2ae      	uxth	r6, r5
 80009e0:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 80009e2:	d931      	bls.n	8000a48 <HAL_ADC_ConfigChannel+0x84>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80009e4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80009e8:	f04f 0e07 	mov.w	lr, #7
 80009ec:	68e7      	ldr	r7, [r4, #12]
 80009ee:	3b1e      	subs	r3, #30
 80009f0:	fa0e fe03 	lsl.w	lr, lr, r3
 80009f4:	ea27 070e 	bic.w	r7, r7, lr
 80009f8:	60e7      	str	r7, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80009fa:	4f3d      	ldr	r7, [pc, #244]	; (8000af0 <HAL_ADC_ConfigChannel+0x12c>)
 80009fc:	42bd      	cmp	r5, r7
 80009fe:	d11e      	bne.n	8000a3e <HAL_ADC_ConfigChannel+0x7a>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000a00:	68e3      	ldr	r3, [r4, #12]
 8000a02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a06:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 8000a08:	684a      	ldr	r2, [r1, #4]
 8000a0a:	2a06      	cmp	r2, #6
 8000a0c:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000a10:	d82a      	bhi.n	8000a68 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a12:	4413      	add	r3, r2
 8000a14:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000a16:	1f59      	subs	r1, r3, #5
 8000a18:	231f      	movs	r3, #31
 8000a1a:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a1c:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a20:	ea27 0303 	bic.w	r3, r7, r3
 8000a24:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a26:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a28:	4311      	orrs	r1, r2
 8000a2a:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <HAL_ADC_ConfigChannel+0x130>)
 8000a2e:	429c      	cmp	r4, r3
 8000a30:	d039      	beq.n	8000aa6 <HAL_ADC_ConfigChannel+0xe2>
  __HAL_UNLOCK(hadc);
 8000a32:	2300      	movs	r3, #0
 8000a34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000a38:	4618      	mov	r0, r3
}
 8000a3a:	b003      	add	sp, #12
 8000a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000a3e:	68e7      	ldr	r7, [r4, #12]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	433b      	orrs	r3, r7
 8000a46:	e7de      	b.n	8000a06 <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a48:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000a4c:	f04f 0e07 	mov.w	lr, #7
 8000a50:	6927      	ldr	r7, [r4, #16]
 8000a52:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000a5a:	ea27 070e 	bic.w	r7, r7, lr
 8000a5e:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a60:	6927      	ldr	r7, [r4, #16]
 8000a62:	433b      	orrs	r3, r7
 8000a64:	6123      	str	r3, [r4, #16]
 8000a66:	e7cf      	b.n	8000a08 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 8000a68:	2a0c      	cmp	r2, #12
 8000a6a:	d80e      	bhi.n	8000a8a <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a6c:	4413      	add	r3, r2
 8000a6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000a70:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000a74:	231f      	movs	r3, #31
 8000a76:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a78:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a7c:	ea21 0303 	bic.w	r3, r1, r3
 8000a80:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a84:	431a      	orrs	r2, r3
 8000a86:	6322      	str	r2, [r4, #48]	; 0x30
 8000a88:	e7d0      	b.n	8000a2c <HAL_ADC_ConfigChannel+0x68>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a8a:	4413      	add	r3, r2
 8000a8c:	221f      	movs	r2, #31
 8000a8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000a90:	3b41      	subs	r3, #65	; 0x41
 8000a92:	409a      	lsls	r2, r3
 8000a94:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a98:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a9c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000aa0:	4311      	orrs	r1, r2
 8000aa2:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000aa4:	e7c2      	b.n	8000a2c <HAL_ADC_ConfigChannel+0x68>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000aa6:	2d12      	cmp	r5, #18
 8000aa8:	d107      	bne.n	8000aba <HAL_ADC_ConfigChannel+0xf6>
    ADC->CCR |= ADC_CCR_VBATE;
 8000aaa:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <HAL_ADC_ConfigChannel+0x134>)
 8000aac:	6853      	ldr	r3, [r2, #4]
 8000aae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ab2:	6053      	str	r3, [r2, #4]
 8000ab4:	e7bd      	b.n	8000a32 <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 8000ab6:	2002      	movs	r0, #2
 8000ab8:	e7bf      	b.n	8000a3a <HAL_ADC_ConfigChannel+0x76>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_ADC_ConfigChannel+0x12c>)
 8000abc:	429d      	cmp	r5, r3
 8000abe:	d001      	beq.n	8000ac4 <HAL_ADC_ConfigChannel+0x100>
 8000ac0:	2d11      	cmp	r5, #17
 8000ac2:	d1b6      	bne.n	8000a32 <HAL_ADC_ConfigChannel+0x6e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <HAL_ADC_ConfigChannel+0x134>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ac6:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000ac8:	684a      	ldr	r2, [r1, #4]
 8000aca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ace:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ad0:	d1af      	bne.n	8000a32 <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_ADC_ConfigChannel+0x138>)
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_ADC_ConfigChannel+0x13c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	fbb3 f2f2 	udiv	r2, r3, r2
 8000adc:	230a      	movs	r3, #10
 8000ade:	4353      	muls	r3, r2
        counter--;
 8000ae0:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8000ae2:	9b01      	ldr	r3, [sp, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0a4      	beq.n	8000a32 <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 8000ae8:	9b01      	ldr	r3, [sp, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	e7f8      	b.n	8000ae0 <HAL_ADC_ConfigChannel+0x11c>
 8000aee:	bf00      	nop
 8000af0:	10000012 	.word	0x10000012
 8000af4:	40012000 	.word	0x40012000
 8000af8:	40012300 	.word	0x40012300
 8000afc:	20000008 	.word	0x20000008
 8000b00:	000f4240 	.word	0x000f4240

08000b04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b04:	4770      	bx	lr
	...

08000b08 <HAL_ADCEx_MultiModeConfigChannel>:
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b08:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000b0c:	2b01      	cmp	r3, #1
{
 8000b0e:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000b10:	d01d      	beq.n	8000b4e <HAL_ADCEx_MultiModeConfigChannel+0x46>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_ADCEx_MultiModeConfigChannel+0x4c>)
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	f022 021f 	bic.w	r2, r2, #31
 8000b1a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	680c      	ldr	r4, [r1, #0]
 8000b20:	4322      	orrs	r2, r4
 8000b22:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000b2a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	684c      	ldr	r4, [r1, #4]
 8000b30:	4322      	orrs	r2, r4
 8000b32:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8000b34:	685a      	ldr	r2, [r3, #4]
 8000b36:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000b3a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	6889      	ldr	r1, [r1, #8]
 8000b40:	430a      	orrs	r2, r1
 8000b42:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b44:	2300      	movs	r3, #0
 8000b46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000b4e:	2002      	movs	r0, #2
}
 8000b50:	bd10      	pop	{r4, pc}
 8000b52:	bf00      	nop
 8000b54:	40012300 	.word	0x40012300

08000b58 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b5a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b5e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b66:	041b      	lsls	r3, r3, #16
 8000b68:	0c1b      	lsrs	r3, r3, #16
 8000b6a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b72:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b74:	60d3      	str	r3, [r2, #12]
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7e:	b530      	push	{r4, r5, lr}
 8000b80:	68dc      	ldr	r4, [r3, #12]
 8000b82:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b86:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	bf28      	it	cs
 8000b90:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b98:	bf8c      	ite	hi
 8000b9a:	3c03      	subhi	r4, #3
 8000b9c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 8000ba2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f103 33ff 	add.w	r3, r3, #4294967295
 8000ba8:	ea01 0103 	and.w	r1, r1, r3
 8000bac:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	fa05 f404 	lsl.w	r4, r5, r4
 8000bb4:	f104 34ff 	add.w	r4, r4, #4294967295
 8000bb8:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	ea42 0201 	orr.w	r2, r2, r1
 8000bc0:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000bc4:	da05      	bge.n	8000bd2 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	f000 000f 	and.w	r0, r0, #15
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_NVIC_SetPriority+0x6c>)
 8000bce:	541a      	strb	r2, [r3, r0]
 8000bd0:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000bdc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000be0:	bd30      	pop	{r4, r5, pc}
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00
 8000be8:	e000ed14 	.word	0xe000ed14

08000bec <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bec:	0942      	lsrs	r2, r0, #5
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f000 001f 	and.w	r0, r0, #31
 8000bf4:	fa03 f000 	lsl.w	r0, r3, r0
 8000bf8:	4b01      	ldr	r3, [pc, #4]	; (8000c00 <HAL_NVIC_EnableIRQ+0x14>)
 8000bfa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c04:	3801      	subs	r0, #1
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d20a      	bcs.n	8000c22 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	21f0      	movs	r1, #240	; 0xf0
 8000c10:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c12:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c32:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	bf0c      	ite	eq
 8000c38:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c3c:	f022 0204 	bicne.w	r2, r2, #4
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	4770      	bx	lr
 8000c44:	e000e010 	.word	0xe000e010

08000c48 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c48:	4770      	bx	lr

08000c4a <HAL_SYSTICK_IRQHandler>:
{
 8000c4a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000c4c:	f7ff fffc 	bl	8000c48 <HAL_SYSTICK_Callback>
 8000c50:	bd08      	pop	{r3, pc}
	...

08000c54 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000c54:	6803      	ldr	r3, [r0, #0]
 8000c56:	2118      	movs	r1, #24
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000c5e:	3a10      	subs	r2, #16
 8000c60:	f023 0303 	bic.w	r3, r3, #3
 8000c64:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c68:	4904      	ldr	r1, [pc, #16]	; (8000c7c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000c6a:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c6c:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000c6e:	bf88      	it	hi
 8000c70:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c72:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000c74:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8000c76:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	080022a0 	.word	0x080022a0

08000c80 <HAL_DMA_Init>:
{
 8000c80:	b570      	push	{r4, r5, r6, lr}
 8000c82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff fc9c 	bl	80005c0 <HAL_GetTick>
 8000c88:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d071      	beq.n	8000d72 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000c8e:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8000c90:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8000c92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c96:	2302      	movs	r3, #2
 8000c98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000c9c:	6813      	ldr	r3, [r2, #0]
 8000c9e:	f023 0301 	bic.w	r3, r3, #1
 8000ca2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ca4:	6821      	ldr	r1, [r4, #0]
 8000ca6:	680b      	ldr	r3, [r1, #0]
 8000ca8:	07d8      	lsls	r0, r3, #31
 8000caa:	d43c      	bmi.n	8000d26 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000cac:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000cae:	4d32      	ldr	r5, [pc, #200]	; (8000d78 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cb0:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000cb2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cb4:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb6:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	68e2      	ldr	r2, [r4, #12]
 8000cbc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cbe:	6922      	ldr	r2, [r4, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	6962      	ldr	r2, [r4, #20]
 8000cc4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cc6:	69e2      	ldr	r2, [r4, #28]
 8000cc8:	4303      	orrs	r3, r0
 8000cca:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ccc:	6a22      	ldr	r2, [r4, #32]
 8000cce:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cd2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cd4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000cd8:	bf01      	itttt	eq
 8000cda:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000cdc:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000cde:	4335      	orreq	r5, r6
 8000ce0:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ce2:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8000ce4:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000ce6:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ce8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000cec:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cf0:	d10b      	bne.n	8000d0a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000cf2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cf4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000cf6:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cf8:	b13d      	cbz	r5, 8000d0a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000cfa:	b9f8      	cbnz	r0, 8000d3c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000cfc:	2a01      	cmp	r2, #1
 8000cfe:	d02d      	beq.n	8000d5c <HAL_DMA_Init+0xdc>
 8000d00:	d301      	bcc.n	8000d06 <HAL_DMA_Init+0x86>
 8000d02:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000d04:	d101      	bne.n	8000d0a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d06:	01ea      	lsls	r2, r5, #7
 8000d08:	d42b      	bmi.n	8000d62 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000d0a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	f7ff ffa1 	bl	8000c54 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d12:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000d14:	233f      	movs	r3, #63	; 0x3f
 8000d16:	4093      	lsls	r3, r2
 8000d18:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d1a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000d1c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d1e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000d20:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000d24:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d26:	f7ff fc4b 	bl	80005c0 <HAL_GetTick>
 8000d2a:	1b40      	subs	r0, r0, r5
 8000d2c:	2805      	cmp	r0, #5
 8000d2e:	d9b9      	bls.n	8000ca4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d30:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d32:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d34:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000d36:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d3c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000d40:	d113      	bne.n	8000d6a <HAL_DMA_Init+0xea>
    switch (tmp)
 8000d42:	2a03      	cmp	r2, #3
 8000d44:	d8e1      	bhi.n	8000d0a <HAL_DMA_Init+0x8a>
 8000d46:	a001      	add	r0, pc, #4	; (adr r0, 8000d4c <HAL_DMA_Init+0xcc>)
 8000d48:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000d4c:	08000d63 	.word	0x08000d63
 8000d50:	08000d07 	.word	0x08000d07
 8000d54:	08000d63 	.word	0x08000d63
 8000d58:	08000d5d 	.word	0x08000d5d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d5c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000d60:	d1d3      	bne.n	8000d0a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d62:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000d64:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d66:	6563      	str	r3, [r4, #84]	; 0x54
 8000d68:	e7e5      	b.n	8000d36 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000d6a:	2a02      	cmp	r2, #2
 8000d6c:	d9f9      	bls.n	8000d62 <HAL_DMA_Init+0xe2>
 8000d6e:	2a03      	cmp	r2, #3
 8000d70:	e7c8      	b.n	8000d04 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000d72:	2001      	movs	r0, #1
 8000d74:	bd70      	pop	{r4, r5, r6, pc}
 8000d76:	bf00      	nop
 8000d78:	e010803f 	.word	0xe010803f

08000d7c <HAL_DMA_Start_IT>:
{
 8000d7c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000d7e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000d82:	2c01      	cmp	r4, #1
 8000d84:	d035      	beq.n	8000df2 <HAL_DMA_Start_IT+0x76>
 8000d86:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d88:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000d8a:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8000d8c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d90:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000d94:	2c01      	cmp	r4, #1
 8000d96:	f04f 0402 	mov.w	r4, #2
 8000d9a:	d128      	bne.n	8000dee <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d9c:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000da0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000da2:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000da4:	6825      	ldr	r5, [r4, #0]
 8000da6:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000daa:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000dac:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000dae:	6883      	ldr	r3, [r0, #8]
 8000db0:	2b40      	cmp	r3, #64	; 0x40
 8000db2:	d119      	bne.n	8000de8 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8000db4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000db6:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000db8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000dba:	233f      	movs	r3, #63	; 0x3f
 8000dbc:	4093      	lsls	r3, r2
 8000dbe:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	f043 0316 	orr.w	r3, r3, #22
 8000dc6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000dc8:	6963      	ldr	r3, [r4, #20]
 8000dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dce:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000dd0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000dd2:	b11b      	cbz	r3, 8000ddc <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000ddc:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dde:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6023      	str	r3, [r4, #0]
 8000de6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000de8:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000dea:	60e2      	str	r2, [r4, #12]
 8000dec:	e7e4      	b.n	8000db8 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000dee:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000df2:	2002      	movs	r0, #2
}
 8000df4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000df8 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000df8:	2300      	movs	r3, #0
{
 8000dfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000dfc:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000dfe:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000e00:	4b59      	ldr	r3, [pc, #356]	; (8000f68 <HAL_DMA_IRQHandler+0x170>)
{
 8000e02:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e04:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000e06:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e08:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000e0a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	4216      	tst	r6, r2
 8000e10:	d00c      	beq.n	8000e2c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e12:	6801      	ldr	r1, [r0, #0]
 8000e14:	6808      	ldr	r0, [r1, #0]
 8000e16:	0740      	lsls	r0, r0, #29
 8000e18:	d508      	bpl.n	8000e2c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e1a:	6808      	ldr	r0, [r1, #0]
 8000e1c:	f020 0004 	bic.w	r0, r0, #4
 8000e20:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000e22:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000e24:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000e26:	f042 0201 	orr.w	r2, r2, #1
 8000e2a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	4216      	tst	r6, r2
 8000e32:	d008      	beq.n	8000e46 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000e34:	6821      	ldr	r1, [r4, #0]
 8000e36:	6949      	ldr	r1, [r1, #20]
 8000e38:	0609      	lsls	r1, r1, #24
 8000e3a:	d504      	bpl.n	8000e46 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000e3c:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000e3e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000e40:	f042 0202 	orr.w	r2, r2, #2
 8000e44:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e46:	2204      	movs	r2, #4
 8000e48:	409a      	lsls	r2, r3
 8000e4a:	4216      	tst	r6, r2
 8000e4c:	d008      	beq.n	8000e60 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000e4e:	6821      	ldr	r1, [r4, #0]
 8000e50:	6809      	ldr	r1, [r1, #0]
 8000e52:	0788      	lsls	r0, r1, #30
 8000e54:	d504      	bpl.n	8000e60 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000e56:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000e58:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000e5a:	f042 0204 	orr.w	r2, r2, #4
 8000e5e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000e60:	2210      	movs	r2, #16
 8000e62:	409a      	lsls	r2, r3
 8000e64:	4216      	tst	r6, r2
 8000e66:	d010      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000e68:	6823      	ldr	r3, [r4, #0]
 8000e6a:	6819      	ldr	r1, [r3, #0]
 8000e6c:	0709      	lsls	r1, r1, #28
 8000e6e:	d50c      	bpl.n	8000e8a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000e70:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	0350      	lsls	r0, r2, #13
 8000e76:	d535      	bpl.n	8000ee4 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	0319      	lsls	r1, r3, #12
 8000e7c:	d401      	bmi.n	8000e82 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e80:	e000      	b.n	8000e84 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000e82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000e84:	b10b      	cbz	r3, 8000e8a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000e86:	4620      	mov	r0, r4
 8000e88:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000e8a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	408a      	lsls	r2, r1
 8000e90:	4216      	tst	r6, r2
 8000e92:	d038      	beq.n	8000f06 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000e94:	6823      	ldr	r3, [r4, #0]
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	06c6      	lsls	r6, r0, #27
 8000e9a:	d534      	bpl.n	8000f06 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000e9c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000e9e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000ea2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ea4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000ea6:	d125      	bne.n	8000ef4 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ea8:	f022 0216 	bic.w	r2, r2, #22
 8000eac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000eae:	695a      	ldr	r2, [r3, #20]
 8000eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eb4:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eb6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000eb8:	b90a      	cbnz	r2, 8000ebe <HAL_DMA_IRQHandler+0xc6>
 8000eba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000ebc:	b11a      	cbz	r2, 8000ec6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	f022 0208 	bic.w	r2, r2, #8
 8000ec4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ec6:	233f      	movs	r3, #63	; 0x3f
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000ed8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000eda:	b10b      	cbz	r3, 8000ee0 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000edc:	4620      	mov	r0, r4
 8000ede:	4798      	blx	r3
}
 8000ee0:	b003      	add	sp, #12
 8000ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	05d2      	lsls	r2, r2, #23
 8000ee8:	d4c9      	bmi.n	8000e7e <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	f022 0208 	bic.w	r2, r2, #8
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e7c4      	b.n	8000e7e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ef4:	0350      	lsls	r0, r2, #13
 8000ef6:	d528      	bpl.n	8000f4a <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	0319      	lsls	r1, r3, #12
 8000efc:	d432      	bmi.n	8000f64 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000efe:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000f00:	b10b      	cbz	r3, 8000f06 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000f02:	4620      	mov	r0, r4
 8000f04:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000f06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0e9      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000f0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f0e:	07da      	lsls	r2, r3, #31
 8000f10:	d519      	bpl.n	8000f46 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000f12:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000f14:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000f16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000f1a:	6813      	ldr	r3, [r2, #0]
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000f22:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000f26:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000f2a:	9b01      	ldr	r3, [sp, #4]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	429f      	cmp	r7, r3
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	d302      	bcc.n	8000f3a <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000f34:	6813      	ldr	r3, [r2, #0]
 8000f36:	07db      	lsls	r3, r3, #31
 8000f38:	d4f7      	bmi.n	8000f2a <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000f46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000f48:	e7c7      	b.n	8000eda <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000f50:	d108      	bne.n	8000f64 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000f52:	6819      	ldr	r1, [r3, #0]
 8000f54:	f021 0110 	bic.w	r1, r1, #16
 8000f58:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000f5a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000f5c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000f60:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000f64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000f66:	e7cb      	b.n	8000f00 <HAL_DMA_IRQHandler+0x108>
 8000f68:	20000008 	.word	0x20000008

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f70:	680b      	ldr	r3, [r1, #0]
{
 8000f72:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001138 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f78:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f7a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7c:	4a6c      	ldr	r2, [pc, #432]	; (8001130 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f7e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800113c <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000f82:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000f88:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000f90:	45b6      	cmp	lr, r6
 8000f92:	f040 80b3 	bne.w	80010fc <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f96:	684c      	ldr	r4, [r1, #4]
 8000f98:	f024 0710 	bic.w	r7, r4, #16
 8000f9c:	2f02      	cmp	r7, #2
 8000f9e:	d116      	bne.n	8000fce <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000fa0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fa4:	f003 0b07 	and.w	fp, r3, #7
 8000fa8:	f04f 0c0f 	mov.w	ip, #15
 8000fac:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000fb0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000fb4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fb8:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000fbc:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fc0:	690d      	ldr	r5, [r1, #16]
 8000fc2:	fa05 f50b 	lsl.w	r5, r5, fp
 8000fc6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000fca:	f8ca 5020 	str.w	r5, [sl, #32]
 8000fce:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fd2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000fd4:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fd8:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fdc:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fe2:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fe6:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe8:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fea:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fee:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000ff2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff6:	d811      	bhi.n	800101c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ff8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ffa:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ffe:	68cf      	ldr	r7, [r1, #12]
 8001000:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001004:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001008:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800100a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800100c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001010:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001014:	409f      	lsls	r7, r3
 8001016:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800101a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800101c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800101e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001020:	688f      	ldr	r7, [r1, #8]
 8001022:	fa07 f70a 	lsl.w	r7, r7, sl
 8001026:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001028:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800102a:	00e5      	lsls	r5, r4, #3
 800102c:	d566      	bpl.n	80010fc <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8001032:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001036:	f003 0e03 	and.w	lr, r3, #3
 800103a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8001042:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001046:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 800104e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001052:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8001056:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 800105a:	9503      	str	r5, [sp, #12]
 800105c:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800105e:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8001062:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001066:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800106a:	4d32      	ldr	r5, [pc, #200]	; (8001134 <HAL_GPIO_Init+0x1c8>)
 800106c:	42a8      	cmp	r0, r5
 800106e:	d04c      	beq.n	800110a <HAL_GPIO_Init+0x19e>
 8001070:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001074:	42a8      	cmp	r0, r5
 8001076:	d04a      	beq.n	800110e <HAL_GPIO_Init+0x1a2>
 8001078:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800107c:	42a8      	cmp	r0, r5
 800107e:	d048      	beq.n	8001112 <HAL_GPIO_Init+0x1a6>
 8001080:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001084:	42a8      	cmp	r0, r5
 8001086:	d046      	beq.n	8001116 <HAL_GPIO_Init+0x1aa>
 8001088:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800108c:	42a8      	cmp	r0, r5
 800108e:	d044      	beq.n	800111a <HAL_GPIO_Init+0x1ae>
 8001090:	4548      	cmp	r0, r9
 8001092:	d044      	beq.n	800111e <HAL_GPIO_Init+0x1b2>
 8001094:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001098:	42a8      	cmp	r0, r5
 800109a:	d042      	beq.n	8001122 <HAL_GPIO_Init+0x1b6>
 800109c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a0:	42a8      	cmp	r0, r5
 80010a2:	d040      	beq.n	8001126 <HAL_GPIO_Init+0x1ba>
 80010a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a8:	42a8      	cmp	r0, r5
 80010aa:	d03e      	beq.n	800112a <HAL_GPIO_Init+0x1be>
 80010ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010b0:	42a8      	cmp	r0, r5
 80010b2:	bf14      	ite	ne
 80010b4:	250a      	movne	r5, #10
 80010b6:	2509      	moveq	r5, #9
 80010b8:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010bc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010c0:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80010c4:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 80010ca:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	bf0c      	ite	eq
 80010ce:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010d0:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80010d6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80010d8:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80010da:	bf0c      	ite	eq
 80010dc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010de:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 80010e4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80010e6:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	bf0c      	ite	eq
 80010ea:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010ec:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ee:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80010f0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80010f2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	bf54      	ite	pl
 80010f6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80010f8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80010fa:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010fc:	3301      	adds	r3, #1
 80010fe:	2b10      	cmp	r3, #16
 8001100:	f47f af3f 	bne.w	8000f82 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001104:	b005      	add	sp, #20
 8001106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800110a:	2500      	movs	r5, #0
 800110c:	e7d4      	b.n	80010b8 <HAL_GPIO_Init+0x14c>
 800110e:	2501      	movs	r5, #1
 8001110:	e7d2      	b.n	80010b8 <HAL_GPIO_Init+0x14c>
 8001112:	2502      	movs	r5, #2
 8001114:	e7d0      	b.n	80010b8 <HAL_GPIO_Init+0x14c>
 8001116:	2503      	movs	r5, #3
 8001118:	e7ce      	b.n	80010b8 <HAL_GPIO_Init+0x14c>
 800111a:	2504      	movs	r5, #4
 800111c:	e7cc      	b.n	80010b8 <HAL_GPIO_Init+0x14c>
 800111e:	2505      	movs	r5, #5
 8001120:	e7ca      	b.n	80010b8 <HAL_GPIO_Init+0x14c>
 8001122:	2506      	movs	r5, #6
 8001124:	e7c8      	b.n	80010b8 <HAL_GPIO_Init+0x14c>
 8001126:	2507      	movs	r5, #7
 8001128:	e7c6      	b.n	80010b8 <HAL_GPIO_Init+0x14c>
 800112a:	2508      	movs	r5, #8
 800112c:	e7c4      	b.n	80010b8 <HAL_GPIO_Init+0x14c>
 800112e:	bf00      	nop
 8001130:	40013c00 	.word	0x40013c00
 8001134:	40020000 	.word	0x40020000
 8001138:	40023800 	.word	0x40023800
 800113c:	40021400 	.word	0x40021400

08001140 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001144:	4604      	mov	r4, r0
 8001146:	b918      	cbnz	r0, 8001150 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001148:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800114a:	b002      	add	sp, #8
 800114c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001150:	6803      	ldr	r3, [r0, #0]
 8001152:	07d8      	lsls	r0, r3, #31
 8001154:	d410      	bmi.n	8001178 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	0799      	lsls	r1, r3, #30
 800115a:	d45e      	bmi.n	800121a <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	0719      	lsls	r1, r3, #28
 8001160:	f100 80a3 	bmi.w	80012aa <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	075a      	lsls	r2, r3, #29
 8001168:	f100 80c4 	bmi.w	80012f4 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800116c:	69a2      	ldr	r2, [r4, #24]
 800116e:	2a00      	cmp	r2, #0
 8001170:	f040 812e 	bne.w	80013d0 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001174:	2000      	movs	r0, #0
 8001176:	e7e8      	b.n	800114a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001178:	4b93      	ldr	r3, [pc, #588]	; (80013c8 <HAL_RCC_OscConfig+0x288>)
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	f002 020c 	and.w	r2, r2, #12
 8001180:	2a04      	cmp	r2, #4
 8001182:	d007      	beq.n	8001194 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	f002 020c 	and.w	r2, r2, #12
 800118a:	2a08      	cmp	r2, #8
 800118c:	d10a      	bne.n	80011a4 <HAL_RCC_OscConfig+0x64>
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	025a      	lsls	r2, r3, #9
 8001192:	d507      	bpl.n	80011a4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	4b8c      	ldr	r3, [pc, #560]	; (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	039b      	lsls	r3, r3, #14
 800119a:	d5dc      	bpl.n	8001156 <HAL_RCC_OscConfig+0x16>
 800119c:	6863      	ldr	r3, [r4, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1d9      	bne.n	8001156 <HAL_RCC_OscConfig+0x16>
 80011a2:	e7d1      	b.n	8001148 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a4:	6863      	ldr	r3, [r4, #4]
 80011a6:	4d88      	ldr	r5, [pc, #544]	; (80013c8 <HAL_RCC_OscConfig+0x288>)
 80011a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ac:	d111      	bne.n	80011d2 <HAL_RCC_OscConfig+0x92>
 80011ae:	682b      	ldr	r3, [r5, #0]
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011b6:	f7ff fa03 	bl	80005c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	4d83      	ldr	r5, [pc, #524]	; (80013c8 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80011bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	039f      	lsls	r7, r3, #14
 80011c2:	d4c8      	bmi.n	8001156 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff f9fc 	bl	80005c0 <HAL_GetTick>
 80011c8:	1b80      	subs	r0, r0, r6
 80011ca:	2864      	cmp	r0, #100	; 0x64
 80011cc:	d9f7      	bls.n	80011be <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80011ce:	2003      	movs	r0, #3
 80011d0:	e7bb      	b.n	800114a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d2:	b99b      	cbnz	r3, 80011fc <HAL_RCC_OscConfig+0xbc>
 80011d4:	682b      	ldr	r3, [r5, #0]
 80011d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011da:	602b      	str	r3, [r5, #0]
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011e4:	f7ff f9ec 	bl	80005c0 <HAL_GetTick>
 80011e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	0398      	lsls	r0, r3, #14
 80011ee:	d5b2      	bpl.n	8001156 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff f9e6 	bl	80005c0 <HAL_GetTick>
 80011f4:	1b80      	subs	r0, r0, r6
 80011f6:	2864      	cmp	r0, #100	; 0x64
 80011f8:	d9f7      	bls.n	80011ea <HAL_RCC_OscConfig+0xaa>
 80011fa:	e7e8      	b.n	80011ce <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	d103      	bne.n	800120c <HAL_RCC_OscConfig+0xcc>
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	602b      	str	r3, [r5, #0]
 800120a:	e7d0      	b.n	80011ae <HAL_RCC_OscConfig+0x6e>
 800120c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001210:	602b      	str	r3, [r5, #0]
 8001212:	682b      	ldr	r3, [r5, #0]
 8001214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001218:	e7cc      	b.n	80011b4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800121a:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <HAL_RCC_OscConfig+0x288>)
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	f012 0f0c 	tst.w	r2, #12
 8001222:	d007      	beq.n	8001234 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	f002 020c 	and.w	r2, r2, #12
 800122a:	2a08      	cmp	r2, #8
 800122c:	d111      	bne.n	8001252 <HAL_RCC_OscConfig+0x112>
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	0259      	lsls	r1, r3, #9
 8001232:	d40e      	bmi.n	8001252 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001234:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	0792      	lsls	r2, r2, #30
 800123a:	d502      	bpl.n	8001242 <HAL_RCC_OscConfig+0x102>
 800123c:	68e2      	ldr	r2, [r4, #12]
 800123e:	2a01      	cmp	r2, #1
 8001240:	d182      	bne.n	8001148 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	6921      	ldr	r1, [r4, #16]
 8001246:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800124a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800124e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001250:	e784      	b.n	800115c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001252:	68e3      	ldr	r3, [r4, #12]
 8001254:	4d5c      	ldr	r5, [pc, #368]	; (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001256:	b1bb      	cbz	r3, 8001288 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001260:	f7ff f9ae 	bl	80005c0 <HAL_GetTick>
 8001264:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001266:	682b      	ldr	r3, [r5, #0]
 8001268:	079f      	lsls	r7, r3, #30
 800126a:	d507      	bpl.n	800127c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126c:	682b      	ldr	r3, [r5, #0]
 800126e:	6922      	ldr	r2, [r4, #16]
 8001270:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001274:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001278:	602b      	str	r3, [r5, #0]
 800127a:	e76f      	b.n	800115c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127c:	f7ff f9a0 	bl	80005c0 <HAL_GetTick>
 8001280:	1b80      	subs	r0, r0, r6
 8001282:	2802      	cmp	r0, #2
 8001284:	d9ef      	bls.n	8001266 <HAL_RCC_OscConfig+0x126>
 8001286:	e7a2      	b.n	80011ce <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001290:	f7ff f996 	bl	80005c0 <HAL_GetTick>
 8001294:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	682b      	ldr	r3, [r5, #0]
 8001298:	0798      	lsls	r0, r3, #30
 800129a:	f57f af5f 	bpl.w	800115c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff f98f 	bl	80005c0 <HAL_GetTick>
 80012a2:	1b80      	subs	r0, r0, r6
 80012a4:	2802      	cmp	r0, #2
 80012a6:	d9f6      	bls.n	8001296 <HAL_RCC_OscConfig+0x156>
 80012a8:	e791      	b.n	80011ce <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012aa:	6963      	ldr	r3, [r4, #20]
 80012ac:	4d46      	ldr	r5, [pc, #280]	; (80013c8 <HAL_RCC_OscConfig+0x288>)
 80012ae:	b183      	cbz	r3, 80012d2 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80012b0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012b8:	f7ff f982 	bl	80005c0 <HAL_GetTick>
 80012bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012c0:	079b      	lsls	r3, r3, #30
 80012c2:	f53f af4f 	bmi.w	8001164 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c6:	f7ff f97b 	bl	80005c0 <HAL_GetTick>
 80012ca:	1b80      	subs	r0, r0, r6
 80012cc:	2802      	cmp	r0, #2
 80012ce:	d9f6      	bls.n	80012be <HAL_RCC_OscConfig+0x17e>
 80012d0:	e77d      	b.n	80011ce <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80012d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012da:	f7ff f971 	bl	80005c0 <HAL_GetTick>
 80012de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012e2:	079f      	lsls	r7, r3, #30
 80012e4:	f57f af3e 	bpl.w	8001164 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e8:	f7ff f96a 	bl	80005c0 <HAL_GetTick>
 80012ec:	1b80      	subs	r0, r0, r6
 80012ee:	2802      	cmp	r0, #2
 80012f0:	d9f6      	bls.n	80012e0 <HAL_RCC_OscConfig+0x1a0>
 80012f2:	e76c      	b.n	80011ce <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f4:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <HAL_RCC_OscConfig+0x288>)
 80012f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f8:	00d0      	lsls	r0, r2, #3
 80012fa:	d427      	bmi.n	800134c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80012fe:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001300:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001310:	4d2e      	ldr	r5, [pc, #184]	; (80013cc <HAL_RCC_OscConfig+0x28c>)
 8001312:	682b      	ldr	r3, [r5, #0]
 8001314:	05d9      	lsls	r1, r3, #23
 8001316:	d51b      	bpl.n	8001350 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001318:	68a3      	ldr	r3, [r4, #8]
 800131a:	4d2b      	ldr	r5, [pc, #172]	; (80013c8 <HAL_RCC_OscConfig+0x288>)
 800131c:	2b01      	cmp	r3, #1
 800131e:	d127      	bne.n	8001370 <HAL_RCC_OscConfig+0x230>
 8001320:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001328:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800132c:	f7ff f948 	bl	80005c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001330:	4f25      	ldr	r7, [pc, #148]	; (80013c8 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001332:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001334:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001336:	079b      	lsls	r3, r3, #30
 8001338:	d53f      	bpl.n	80013ba <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 800133a:	2e00      	cmp	r6, #0
 800133c:	f43f af16 	beq.w	800116c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001340:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <HAL_RCC_OscConfig+0x288>)
 8001342:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	e70f      	b.n	800116c <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 800134c:	2600      	movs	r6, #0
 800134e:	e7df      	b.n	8001310 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001356:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001358:	f7ff f932 	bl	80005c0 <HAL_GetTick>
 800135c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800135e:	682b      	ldr	r3, [r5, #0]
 8001360:	05da      	lsls	r2, r3, #23
 8001362:	d4d9      	bmi.n	8001318 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001364:	f7ff f92c 	bl	80005c0 <HAL_GetTick>
 8001368:	1bc0      	subs	r0, r0, r7
 800136a:	2864      	cmp	r0, #100	; 0x64
 800136c:	d9f7      	bls.n	800135e <HAL_RCC_OscConfig+0x21e>
 800136e:	e72e      	b.n	80011ce <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001370:	b9ab      	cbnz	r3, 800139e <HAL_RCC_OscConfig+0x25e>
 8001372:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001374:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	672b      	str	r3, [r5, #112]	; 0x70
 800137e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001386:	f7ff f91b 	bl	80005c0 <HAL_GetTick>
 800138a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800138e:	0798      	lsls	r0, r3, #30
 8001390:	d5d3      	bpl.n	800133a <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff f915 	bl	80005c0 <HAL_GetTick>
 8001396:	1bc0      	subs	r0, r0, r7
 8001398:	4540      	cmp	r0, r8
 800139a:	d9f7      	bls.n	800138c <HAL_RCC_OscConfig+0x24c>
 800139c:	e717      	b.n	80011ce <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139e:	2b05      	cmp	r3, #5
 80013a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013a2:	d103      	bne.n	80013ac <HAL_RCC_OscConfig+0x26c>
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	672b      	str	r3, [r5, #112]	; 0x70
 80013aa:	e7b9      	b.n	8001320 <HAL_RCC_OscConfig+0x1e0>
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	672b      	str	r3, [r5, #112]	; 0x70
 80013b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013b4:	f023 0304 	bic.w	r3, r3, #4
 80013b8:	e7b5      	b.n	8001326 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff f901 	bl	80005c0 <HAL_GetTick>
 80013be:	eba0 0008 	sub.w	r0, r0, r8
 80013c2:	42a8      	cmp	r0, r5
 80013c4:	d9b6      	bls.n	8001334 <HAL_RCC_OscConfig+0x1f4>
 80013c6:	e702      	b.n	80011ce <HAL_RCC_OscConfig+0x8e>
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d0:	4d24      	ldr	r5, [pc, #144]	; (8001464 <HAL_RCC_OscConfig+0x324>)
 80013d2:	68ab      	ldr	r3, [r5, #8]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b08      	cmp	r3, #8
 80013da:	f43f aeb5 	beq.w	8001148 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80013de:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e6:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e8:	d12f      	bne.n	800144a <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80013ea:	f7ff f8e9 	bl	80005c0 <HAL_GetTick>
 80013ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f0:	682b      	ldr	r3, [r5, #0]
 80013f2:	0199      	lsls	r1, r3, #6
 80013f4:	d423      	bmi.n	800143e <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013f6:	6a22      	ldr	r2, [r4, #32]
 80013f8:	69e3      	ldr	r3, [r4, #28]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013fe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001402:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001404:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001408:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800140a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800140e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001410:	4c14      	ldr	r4, [pc, #80]	; (8001464 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001412:	0852      	lsrs	r2, r2, #1
 8001414:	3a01      	subs	r2, #1
 8001416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800141a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800141c:	682b      	ldr	r3, [r5, #0]
 800141e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001422:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001424:	f7ff f8cc 	bl	80005c0 <HAL_GetTick>
 8001428:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	019a      	lsls	r2, r3, #6
 800142e:	f53f aea1 	bmi.w	8001174 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff f8c5 	bl	80005c0 <HAL_GetTick>
 8001436:	1b40      	subs	r0, r0, r5
 8001438:	2802      	cmp	r0, #2
 800143a:	d9f6      	bls.n	800142a <HAL_RCC_OscConfig+0x2ea>
 800143c:	e6c7      	b.n	80011ce <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff f8bf 	bl	80005c0 <HAL_GetTick>
 8001442:	1b80      	subs	r0, r0, r6
 8001444:	2802      	cmp	r0, #2
 8001446:	d9d3      	bls.n	80013f0 <HAL_RCC_OscConfig+0x2b0>
 8001448:	e6c1      	b.n	80011ce <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800144a:	f7ff f8b9 	bl	80005c0 <HAL_GetTick>
 800144e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001450:	682b      	ldr	r3, [r5, #0]
 8001452:	019b      	lsls	r3, r3, #6
 8001454:	f57f ae8e 	bpl.w	8001174 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff f8b2 	bl	80005c0 <HAL_GetTick>
 800145c:	1b00      	subs	r0, r0, r4
 800145e:	2802      	cmp	r0, #2
 8001460:	d9f6      	bls.n	8001450 <HAL_RCC_OscConfig+0x310>
 8001462:	e6b4      	b.n	80011ce <HAL_RCC_OscConfig+0x8e>
 8001464:	40023800 	.word	0x40023800

08001468 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001468:	4913      	ldr	r1, [pc, #76]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800146a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800146c:	688b      	ldr	r3, [r1, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b04      	cmp	r3, #4
 8001474:	d003      	beq.n	800147e <HAL_RCC_GetSysClockFreq+0x16>
 8001476:	2b08      	cmp	r3, #8
 8001478:	d003      	beq.n	8001482 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800147a:	4810      	ldr	r0, [pc, #64]	; (80014bc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800147c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001480:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001482:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001484:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001486:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001488:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800148c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001490:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001494:	bf1a      	itte	ne
 8001496:	480a      	ldrne	r0, [pc, #40]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001498:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800149a:	4808      	ldreq	r0, [pc, #32]	; (80014bc <HAL_RCC_GetSysClockFreq+0x54>)
 800149c:	fba1 0100 	umull	r0, r1, r1, r0
 80014a0:	f7fe feca 	bl	8000238 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x50>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014ac:	3301      	adds	r3, #1
 80014ae:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80014b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80014b4:	bd08      	pop	{r3, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	00f42400 	.word	0x00f42400
 80014c0:	017d7840 	.word	0x017d7840

080014c4 <HAL_RCC_ClockConfig>:
{
 80014c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80014ca:	4604      	mov	r4, r0
 80014cc:	b910      	cbnz	r0, 80014d4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80014ce:	2001      	movs	r0, #1
 80014d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014d4:	4a46      	ldr	r2, [pc, #280]	; (80015f0 <HAL_RCC_ClockConfig+0x12c>)
 80014d6:	6813      	ldr	r3, [r2, #0]
 80014d8:	f003 030f 	and.w	r3, r3, #15
 80014dc:	428b      	cmp	r3, r1
 80014de:	d328      	bcc.n	8001532 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e0:	6821      	ldr	r1, [r4, #0]
 80014e2:	078f      	lsls	r7, r1, #30
 80014e4:	d430      	bmi.n	8001548 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e6:	07c8      	lsls	r0, r1, #31
 80014e8:	d443      	bmi.n	8001572 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014ea:	4a41      	ldr	r2, [pc, #260]	; (80015f0 <HAL_RCC_ClockConfig+0x12c>)
 80014ec:	6813      	ldr	r3, [r2, #0]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	429d      	cmp	r5, r3
 80014f4:	d367      	bcc.n	80015c6 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f6:	6822      	ldr	r2, [r4, #0]
 80014f8:	0751      	lsls	r1, r2, #29
 80014fa:	d470      	bmi.n	80015de <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fc:	0713      	lsls	r3, r2, #28
 80014fe:	d507      	bpl.n	8001510 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001500:	4a3c      	ldr	r2, [pc, #240]	; (80015f4 <HAL_RCC_ClockConfig+0x130>)
 8001502:	6921      	ldr	r1, [r4, #16]
 8001504:	6893      	ldr	r3, [r2, #8]
 8001506:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800150a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800150e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001510:	f7ff ffaa 	bl	8001468 <HAL_RCC_GetSysClockFreq>
 8001514:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <HAL_RCC_ClockConfig+0x130>)
 8001516:	4a38      	ldr	r2, [pc, #224]	; (80015f8 <HAL_RCC_ClockConfig+0x134>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800151e:	5cd3      	ldrb	r3, [r2, r3]
 8001520:	40d8      	lsrs	r0, r3
 8001522:	4b36      	ldr	r3, [pc, #216]	; (80015fc <HAL_RCC_ClockConfig+0x138>)
 8001524:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff f80e 	bl	8000548 <HAL_InitTick>
  return HAL_OK;
 800152c:	2000      	movs	r0, #0
 800152e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	6813      	ldr	r3, [r2, #0]
 8001534:	f023 030f 	bic.w	r3, r3, #15
 8001538:	430b      	orrs	r3, r1
 800153a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153c:	6813      	ldr	r3, [r2, #0]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	4299      	cmp	r1, r3
 8001544:	d1c3      	bne.n	80014ce <HAL_RCC_ClockConfig+0xa>
 8001546:	e7cb      	b.n	80014e0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	f011 0f04 	tst.w	r1, #4
 800154c:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_RCC_ClockConfig+0x130>)
 800154e:	d003      	beq.n	8001558 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001556:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001558:	070e      	lsls	r6, r1, #28
 800155a:	d503      	bpl.n	8001564 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001562:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	68a0      	ldr	r0, [r4, #8]
 8001568:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800156c:	4302      	orrs	r2, r0
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	e7b9      	b.n	80014e6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001572:	6861      	ldr	r1, [r4, #4]
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <HAL_RCC_ClockConfig+0x130>)
 8001576:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001578:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157a:	d11c      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	d0a5      	beq.n	80014ce <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001582:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001584:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001588:	4e1a      	ldr	r6, [pc, #104]	; (80015f4 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800158a:	f022 0203 	bic.w	r2, r2, #3
 800158e:	430a      	orrs	r2, r1
 8001590:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001592:	f7ff f815 	bl	80005c0 <HAL_GetTick>
 8001596:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001598:	68b3      	ldr	r3, [r6, #8]
 800159a:	6862      	ldr	r2, [r4, #4]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015a4:	d0a1      	beq.n	80014ea <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a6:	f7ff f80b 	bl	80005c0 <HAL_GetTick>
 80015aa:	1bc0      	subs	r0, r0, r7
 80015ac:	4540      	cmp	r0, r8
 80015ae:	d9f3      	bls.n	8001598 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80015b0:	2003      	movs	r0, #3
}
 80015b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b6:	2902      	cmp	r1, #2
 80015b8:	d102      	bne.n	80015c0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ba:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80015be:	e7df      	b.n	8001580 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c0:	f012 0f02 	tst.w	r2, #2
 80015c4:	e7dc      	b.n	8001580 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	6813      	ldr	r3, [r2, #0]
 80015c8:	f023 030f 	bic.w	r3, r3, #15
 80015cc:	432b      	orrs	r3, r5
 80015ce:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d0:	6813      	ldr	r3, [r2, #0]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	429d      	cmp	r5, r3
 80015d8:	f47f af79 	bne.w	80014ce <HAL_RCC_ClockConfig+0xa>
 80015dc:	e78b      	b.n	80014f6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015de:	4905      	ldr	r1, [pc, #20]	; (80015f4 <HAL_RCC_ClockConfig+0x130>)
 80015e0:	68e0      	ldr	r0, [r4, #12]
 80015e2:	688b      	ldr	r3, [r1, #8]
 80015e4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015e8:	4303      	orrs	r3, r0
 80015ea:	608b      	str	r3, [r1, #8]
 80015ec:	e786      	b.n	80014fc <HAL_RCC_ClockConfig+0x38>
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00
 80015f4:	40023800 	.word	0x40023800
 80015f8:	080022c3 	.word	0x080022c3
 80015fc:	20000008 	.word	0x20000008

08001600 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001600:	4b01      	ldr	r3, [pc, #4]	; (8001608 <HAL_RCC_GetHCLKFreq+0x8>)
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008

0800160c <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800160c:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800160e:	2302      	movs	r3, #2
 8001610:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8001614:	6813      	ldr	r3, [r2, #0]
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800161c:	2301      	movs	r3, #1
 800161e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
}
 8001622:	2000      	movs	r0, #0
 8001624:	4770      	bx	lr

08001626 <HAL_TIM_PeriodElapsedCallback>:
 8001626:	4770      	bx	lr

08001628 <HAL_TIM_OC_DelayElapsedCallback>:
 8001628:	4770      	bx	lr

0800162a <HAL_TIM_IC_CaptureCallback>:
 800162a:	4770      	bx	lr

0800162c <HAL_TIM_PWM_PulseFinishedCallback>:
 800162c:	4770      	bx	lr

0800162e <HAL_TIM_TriggerCallback>:
 800162e:	4770      	bx	lr

08001630 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001630:	6803      	ldr	r3, [r0, #0]
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	0791      	lsls	r1, r2, #30
{
 8001636:	b510      	push	{r4, lr}
 8001638:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800163a:	d50f      	bpl.n	800165c <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	0792      	lsls	r2, r2, #30
 8001640:	d50c      	bpl.n	800165c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001642:	f06f 0202 	mvn.w	r2, #2
 8001646:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001648:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800164a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800164c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800164e:	0799      	lsls	r1, r3, #30
 8001650:	f000 8085 	beq.w	800175e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001654:	f7ff ffe9 	bl	800162a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001658:	2300      	movs	r3, #0
 800165a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	0752      	lsls	r2, r2, #29
 8001662:	d510      	bpl.n	8001686 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	0750      	lsls	r0, r2, #29
 8001668:	d50d      	bpl.n	8001686 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800166a:	f06f 0204 	mvn.w	r2, #4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800166e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001672:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001674:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001676:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001678:	f413 7f40 	tst.w	r3, #768	; 0x300
 800167c:	d075      	beq.n	800176a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800167e:	f7ff ffd4 	bl	800162a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001682:	2300      	movs	r3, #0
 8001684:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	0711      	lsls	r1, r2, #28
 800168c:	d50f      	bpl.n	80016ae <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	0712      	lsls	r2, r2, #28
 8001692:	d50c      	bpl.n	80016ae <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001694:	f06f 0208 	mvn.w	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001698:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800169a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800169c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800169e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016a0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80016a2:	079b      	lsls	r3, r3, #30
 80016a4:	d067      	beq.n	8001776 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80016a6:	f7ff ffc0 	bl	800162a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016aa:	2300      	movs	r3, #0
 80016ac:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	06d0      	lsls	r0, r2, #27
 80016b4:	d510      	bpl.n	80016d8 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	06d1      	lsls	r1, r2, #27
 80016ba:	d50d      	bpl.n	80016d8 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016bc:	f06f 0210 	mvn.w	r2, #16
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016c0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016c4:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80016c6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016c8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80016ca:	f413 7f40 	tst.w	r3, #768	; 0x300
 80016ce:	d058      	beq.n	8001782 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80016d0:	f7ff ffab 	bl	800162a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016d4:	2300      	movs	r3, #0
 80016d6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	07d2      	lsls	r2, r2, #31
 80016de:	d508      	bpl.n	80016f2 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	07d0      	lsls	r0, r2, #31
 80016e4:	d505      	bpl.n	80016f2 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016e6:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80016ee:	f7ff ff9a 	bl	8001626 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	0611      	lsls	r1, r2, #24
 80016f8:	d508      	bpl.n	800170c <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	0612      	lsls	r2, r2, #24
 80016fe:	d505      	bpl.n	800170c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001700:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001704:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001706:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001708:	f000 f8eb 	bl	80018e2 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	05d0      	lsls	r0, r2, #23
 8001712:	d508      	bpl.n	8001726 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	0611      	lsls	r1, r2, #24
 8001718:	d505      	bpl.n	8001726 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800171a:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800171e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001720:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001722:	f000 f8de 	bl	80018e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	691a      	ldr	r2, [r3, #16]
 800172a:	0652      	lsls	r2, r2, #25
 800172c:	d508      	bpl.n	8001740 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	0650      	lsls	r0, r2, #25
 8001732:	d505      	bpl.n	8001740 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001734:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001738:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800173a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800173c:	f7ff ff77 	bl	800162e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	0691      	lsls	r1, r2, #26
 8001746:	d522      	bpl.n	800178e <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	0692      	lsls	r2, r2, #26
 800174c:	d51f      	bpl.n	800178e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800174e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8001752:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001754:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800175a:	f000 b8c1 	b.w	80018e0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800175e:	f7ff ff63 	bl	8001628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001762:	4620      	mov	r0, r4
 8001764:	f7ff ff62 	bl	800162c <HAL_TIM_PWM_PulseFinishedCallback>
 8001768:	e776      	b.n	8001658 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800176a:	f7ff ff5d 	bl	8001628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800176e:	4620      	mov	r0, r4
 8001770:	f7ff ff5c 	bl	800162c <HAL_TIM_PWM_PulseFinishedCallback>
 8001774:	e785      	b.n	8001682 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001776:	f7ff ff57 	bl	8001628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800177a:	4620      	mov	r0, r4
 800177c:	f7ff ff56 	bl	800162c <HAL_TIM_PWM_PulseFinishedCallback>
 8001780:	e793      	b.n	80016aa <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001782:	f7ff ff51 	bl	8001628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001786:	4620      	mov	r0, r4
 8001788:	f7ff ff50 	bl	800162c <HAL_TIM_PWM_PulseFinishedCallback>
 800178c:	e7a2      	b.n	80016d4 <HAL_TIM_IRQHandler+0xa4>
 800178e:	bd10      	pop	{r4, pc}

08001790 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001790:	4a30      	ldr	r2, [pc, #192]	; (8001854 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001792:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001794:	4290      	cmp	r0, r2
 8001796:	d012      	beq.n	80017be <TIM_Base_SetConfig+0x2e>
 8001798:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800179c:	d00f      	beq.n	80017be <TIM_Base_SetConfig+0x2e>
 800179e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80017a2:	4290      	cmp	r0, r2
 80017a4:	d00b      	beq.n	80017be <TIM_Base_SetConfig+0x2e>
 80017a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017aa:	4290      	cmp	r0, r2
 80017ac:	d007      	beq.n	80017be <TIM_Base_SetConfig+0x2e>
 80017ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017b2:	4290      	cmp	r0, r2
 80017b4:	d003      	beq.n	80017be <TIM_Base_SetConfig+0x2e>
 80017b6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80017ba:	4290      	cmp	r0, r2
 80017bc:	d11d      	bne.n	80017fa <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80017be:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80017c4:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80017c6:	4a23      	ldr	r2, [pc, #140]	; (8001854 <TIM_Base_SetConfig+0xc4>)
 80017c8:	4290      	cmp	r0, r2
 80017ca:	d104      	bne.n	80017d6 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017d0:	68ca      	ldr	r2, [r1, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	e028      	b.n	8001828 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80017d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80017da:	d0f7      	beq.n	80017cc <TIM_Base_SetConfig+0x3c>
 80017dc:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <TIM_Base_SetConfig+0xc8>)
 80017de:	4290      	cmp	r0, r2
 80017e0:	d0f4      	beq.n	80017cc <TIM_Base_SetConfig+0x3c>
 80017e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017e6:	4290      	cmp	r0, r2
 80017e8:	d0f0      	beq.n	80017cc <TIM_Base_SetConfig+0x3c>
 80017ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017ee:	4290      	cmp	r0, r2
 80017f0:	d0ec      	beq.n	80017cc <TIM_Base_SetConfig+0x3c>
 80017f2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80017f6:	4290      	cmp	r0, r2
 80017f8:	d0e8      	beq.n	80017cc <TIM_Base_SetConfig+0x3c>
 80017fa:	4a18      	ldr	r2, [pc, #96]	; (800185c <TIM_Base_SetConfig+0xcc>)
 80017fc:	4290      	cmp	r0, r2
 80017fe:	d0e5      	beq.n	80017cc <TIM_Base_SetConfig+0x3c>
 8001800:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001804:	4290      	cmp	r0, r2
 8001806:	d0e1      	beq.n	80017cc <TIM_Base_SetConfig+0x3c>
 8001808:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800180c:	4290      	cmp	r0, r2
 800180e:	d0dd      	beq.n	80017cc <TIM_Base_SetConfig+0x3c>
 8001810:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001814:	4290      	cmp	r0, r2
 8001816:	d0d9      	beq.n	80017cc <TIM_Base_SetConfig+0x3c>
 8001818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800181c:	4290      	cmp	r0, r2
 800181e:	d0d5      	beq.n	80017cc <TIM_Base_SetConfig+0x3c>
 8001820:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001824:	4290      	cmp	r0, r2
 8001826:	d0d1      	beq.n	80017cc <TIM_Base_SetConfig+0x3c>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001828:	694a      	ldr	r2, [r1, #20]
 800182a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800182e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001830:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001832:	688b      	ldr	r3, [r1, #8]
 8001834:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001836:	680b      	ldr	r3, [r1, #0]
 8001838:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <TIM_Base_SetConfig+0xc4>)
 800183c:	4298      	cmp	r0, r3
 800183e:	d006      	beq.n	800184e <TIM_Base_SetConfig+0xbe>
 8001840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001844:	4298      	cmp	r0, r3
 8001846:	d002      	beq.n	800184e <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001848:	2301      	movs	r3, #1
 800184a:	6143      	str	r3, [r0, #20]
}
 800184c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800184e:	690b      	ldr	r3, [r1, #16]
 8001850:	6303      	str	r3, [r0, #48]	; 0x30
 8001852:	e7f9      	b.n	8001848 <TIM_Base_SetConfig+0xb8>
 8001854:	40010000 	.word	0x40010000
 8001858:	40000400 	.word	0x40000400
 800185c:	40014000 	.word	0x40014000

08001860 <HAL_TIM_Base_Init>:
{ 
 8001860:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001862:	4604      	mov	r4, r0
 8001864:	b1a0      	cbz	r0, 8001890 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001866:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800186a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800186e:	b91b      	cbnz	r3, 8001878 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001870:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001874:	f000 fc5c 	bl	8002130 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001878:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800187a:	6820      	ldr	r0, [r4, #0]
 800187c:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 800187e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001882:	f7ff ff85 	bl	8001790 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001886:	2301      	movs	r3, #1
  return HAL_OK;
 8001888:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800188a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800188e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001890:	2001      	movs	r0, #1
}
 8001892:	bd10      	pop	{r4, pc}

08001894 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001894:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001898:	2b01      	cmp	r3, #1
{
 800189a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800189c:	d01c      	beq.n	80018d8 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800189e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80018a0:	4d0e      	ldr	r5, [pc, #56]	; (80018dc <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 80018a2:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80018a4:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80018a6:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80018a8:	d003      	beq.n	80018b2 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80018aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018ae:	42aa      	cmp	r2, r5
 80018b0:	d103      	bne.n	80018ba <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80018b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80018b6:	684d      	ldr	r5, [r1, #4]
 80018b8:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018ba:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80018bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80018c0:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80018c2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018c6:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80018c8:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80018ca:	6053      	str	r3, [r2, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80018cc:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80018ce:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80018d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80018d8:	2002      	movs	r0, #2
} 
 80018da:	bd30      	pop	{r4, r5, pc}
 80018dc:	40010000 	.word	0x40010000

080018e0 <HAL_TIMEx_CommutationCallback>:
 80018e0:	4770      	bx	lr

080018e2 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018e2:	4770      	bx	lr

080018e4 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <SystemClock_Config+0x90>)
 80018e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 80018ec:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
{
 80018f0:	b094      	sub	sp, #80	; 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f4:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018f6:	4a20      	ldr	r2, [pc, #128]	; (8001978 <SystemClock_Config+0x94>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f8:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001902:	6813      	ldr	r3, [r2, #0]
 8001904:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001910:	9407      	str	r4, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001912:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800191a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800191e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001920:	2300      	movs	r3, #0
 8001922:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001924:	f7ff fc0c 	bl	8001140 <HAL_RCC_OscConfig>
 8001928:	4601      	mov	r1, r0
 800192a:	b100      	cbz	r0, 800192e <SystemClock_Config+0x4a>
 800192c:	e7fe      	b.n	800192c <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001930:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001932:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001934:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001936:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001938:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800193c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001944:	f7ff fdbe 	bl	80014c4 <HAL_RCC_ClockConfig>
 8001948:	4604      	mov	r4, r0
 800194a:	b100      	cbz	r0, 800194e <SystemClock_Config+0x6a>
 800194c:	e7fe      	b.n	800194c <SystemClock_Config+0x68>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800194e:	f7ff fe57 	bl	8001600 <HAL_RCC_GetHCLKFreq>
 8001952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001956:	fbb0 f0f3 	udiv	r0, r0, r3
 800195a:	f7ff f953 	bl	8000c04 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800195e:	2004      	movs	r0, #4
 8001960:	f7ff f966 	bl	8000c30 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001964:	4622      	mov	r2, r4
 8001966:	4621      	mov	r1, r4
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff f906 	bl	8000b7c <HAL_NVIC_SetPriority>
}
 8001970:	b014      	add	sp, #80	; 0x50
 8001972:	bd10      	pop	{r4, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	40007000 	.word	0x40007000

0800197c <main>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197c:	4ea6      	ldr	r6, [pc, #664]	; (8001c18 <main+0x29c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2502      	movs	r5, #2
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001982:	f04f 0a0c 	mov.w	sl, #12
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001986:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800198a:	f04f 090a 	mov.w	r9, #10
{
 800198e:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001992:	b097      	sub	sp, #92	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2703      	movs	r7, #3
  HAL_Init();
 8001996:	f7fe fdfb 	bl	8000590 <HAL_Init>
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800199a:	f04f 0b0b 	mov.w	fp, #11
  SystemClock_Config();
 800199e:	f7ff ffa1 	bl	80018e4 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a2:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a4:	a911      	add	r1, sp, #68	; 0x44
 80019a6:	489d      	ldr	r0, [pc, #628]	; (8001c1c <main+0x2a0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	6333      	str	r3, [r6, #48]	; 0x30
 80019ae:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	9303      	str	r3, [sp, #12]
 80019b6:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019b8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80019ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019be:	6333      	str	r3, [r6, #48]	; 0x30
 80019c0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80019c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c6:	9304      	str	r3, [sp, #16]
 80019c8:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6333      	str	r3, [r6, #48]	; 0x30
 80019d2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	9305      	str	r3, [sp, #20]
 80019da:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019dc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	6333      	str	r3, [r6, #48]	; 0x30
 80019e4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	9306      	str	r3, [sp, #24]
 80019ec:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6333      	str	r3, [r6, #48]	; 0x30
 80019f6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	9307      	str	r3, [sp, #28]
 80019fe:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6333      	str	r3, [r6, #48]	; 0x30
 8001a08:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	9308      	str	r3, [sp, #32]
 8001a10:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a12:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001a14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a18:	6333      	str	r3, [r6, #48]	; 0x30
 8001a1a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a20:	9309      	str	r3, [sp, #36]	; 0x24
 8001a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a24:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6333      	str	r3, [r6, #48]	; 0x30
 8001a2c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	930a      	str	r3, [sp, #40]	; 0x28
 8001a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001a36:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001a38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3c:	6333      	str	r3, [r6, #48]	; 0x30
 8001a3e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a48:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001a4a:	f043 0320 	orr.w	r3, r3, #32
 8001a4e:	6333      	str	r3, [r6, #48]	; 0x30
 8001a50:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	930c      	str	r3, [sp, #48]	; 0x30
 8001a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a60:	6333      	str	r3, [r6, #48]	; 0x30
 8001a62:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	9512      	str	r5, [sp, #72]	; 0x48
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	9414      	str	r4, [sp, #80]	; 0x50
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6e:	930d      	str	r3, [sp, #52]	; 0x34
 8001a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8001a72:	2378      	movs	r3, #120	; 0x78
 8001a74:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001a76:	2306      	movs	r3, #6
 8001a78:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a7a:	f7ff fa77 	bl	8000f6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001a7e:	2304      	movs	r3, #4
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001a80:	a911      	add	r1, sp, #68	; 0x44
 8001a82:	4866      	ldr	r0, [pc, #408]	; (8001c1c <main+0x2a0>)
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001a84:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a86:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a8a:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f7ff fa6c 	bl	8000f6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001a94:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a98:	a911      	add	r1, sp, #68	; 0x44
 8001a9a:	4861      	ldr	r0, [pc, #388]	; (8001c20 <main+0x2a4>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001a9c:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aa4:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa8:	f7ff fa60 	bl	8000f6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8001aac:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab0:	a911      	add	r1, sp, #68	; 0x44
 8001ab2:	485a      	ldr	r0, [pc, #360]	; (8001c1c <main+0x2a0>)
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8001ab4:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001abc:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac0:	f7ff fa54 	bl	8000f6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001ac4:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	a911      	add	r1, sp, #68	; 0x44
 8001aca:	4856      	ldr	r0, [pc, #344]	; (8001c24 <main+0x2a8>)
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001acc:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ace:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad4:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad6:	2304      	movs	r3, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ada:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f7ff fa46 	bl	8000f6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8001ae0:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae4:	a911      	add	r1, sp, #68	; 0x44
 8001ae6:	484f      	ldr	r0, [pc, #316]	; (8001c24 <main+0x2a8>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8001ae8:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001af0:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f7ff fa3a 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D3_Pin uSD_D2_Pin */
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8001af8:	2318      	movs	r3, #24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afa:	a911      	add	r1, sp, #68	; 0x44
 8001afc:	4849      	ldr	r0, [pc, #292]	; (8001c24 <main+0x2a8>)
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8001afe:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001b06:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f7ff fa2f 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_CMD_Pin uSD_CLK_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001b0e:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b10:	a911      	add	r1, sp, #68	; 0x44
 8001b12:	4845      	ldr	r0, [pc, #276]	; (8001c28 <main+0x2ac>)
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001b14:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001b1c:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b20:	f7ff fa24 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RX_Pin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8001b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8001b28:	a911      	add	r1, sp, #68	; 0x44
 8001b2a:	4840      	ldr	r0, [pc, #256]	; (8001c2c <main+0x2b0>)
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8001b2c:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b2e:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b32:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f7ff fa18 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SDA_Pin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8001b3c:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	a911      	add	r1, sp, #68	; 0x44
 8001b40:	4838      	ldr	r0, [pc, #224]	; (8001c24 <main+0x2a8>)
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8001b42:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b44:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b46:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4a:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8001b4e:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f7ff fa0b 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001b56:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001b58:	a911      	add	r1, sp, #68	; 0x44
 8001b5a:	4832      	ldr	r0, [pc, #200]	; (8001c24 <main+0x2a8>)
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001b5c:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b62:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b64:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f7ff fa00 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A12_Pin 
                           FMC_A10_Pin FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 8001b6c:	f248 1337 	movw	r3, #33079	; 0x8137
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b70:	a911      	add	r1, sp, #68	; 0x44
 8001b72:	482b      	ldr	r0, [pc, #172]	; (8001c20 <main+0x2a4>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 8001b74:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b7c:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b80:	f7ff f9f4 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin 
                           LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin 
 8001b84:	f247 033b 	movw	r3, #28731	; 0x703b
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001b88:	a911      	add	r1, sp, #68	; 0x44
 8001b8a:	4829      	ldr	r0, [pc, #164]	; (8001c30 <main+0x2b4>)
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin 
 8001b8c:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8e:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001b92:	f7ff f9eb 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin 
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8001b96:	f24c 7303 	movw	r3, #50947	; 0xc703
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9a:	a911      	add	r1, sp, #68	; 0x44
 8001b9c:	4822      	ldr	r0, [pc, #136]	; (8001c28 <main+0x2ac>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8001b9e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ba6:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001baa:	f7ff f9df 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM_DATIN5_Pin DFSDM_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8001bae:	f640 0308 	movw	r3, #2056	; 0x808
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb2:	a911      	add	r1, sp, #68	; 0x44
 8001bb4:	481d      	ldr	r0, [pc, #116]	; (8001c2c <main+0x2b0>)
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8001bb6:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001bbe:	9715      	str	r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc0:	f7ff f9d4 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8001bc4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc8:	a911      	add	r1, sp, #68	; 0x44
 8001bca:	4818      	ldr	r0, [pc, #96]	; (8001c2c <main+0x2b0>)
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8001bcc:	9311      	str	r3, [sp, #68]	; 0x44
 8001bce:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001bd0:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001bd4:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bda:	f7ff f9c7 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8001bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8001be2:	a911      	add	r1, sp, #68	; 0x44
 8001be4:	4813      	ldr	r0, [pc, #76]	; (8001c34 <main+0x2b8>)
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8001be6:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001be8:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bec:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8001bf2:	f7ff f9bb 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin;
 8001bf6:	f44f 4211 	mov.w	r2, #37120	; 0x9100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bfa:	a911      	add	r1, sp, #68	; 0x44
 8001bfc:	480e      	ldr	r0, [pc, #56]	; (8001c38 <main+0x2bc>)
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin;
 8001bfe:	9211      	str	r2, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c00:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c04:	f7ff f9b2 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL2_Pin D27_Pin D26_Pin FMC_NBL3_Pin 
                           D29_Pin D31_Pin D28_Pin D25_Pin 
                           D30_Pin D24_Pin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8001c08:	f240 62ff 	movw	r2, #1791	; 0x6ff
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c0c:	a911      	add	r1, sp, #68	; 0x44
 8001c0e:	480a      	ldr	r0, [pc, #40]	; (8001c38 <main+0x2bc>)
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8001c10:	9211      	str	r2, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	9413      	str	r4, [sp, #76]	; 0x4c
 8001c16:	e011      	b.n	8001c3c <main+0x2c0>
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40021800 	.word	0x40021800
 8001c24:	40020400 	.word	0x40020400
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40022400 	.word	0x40022400
 8001c34:	40020000 	.word	0x40020000
 8001c38:	40022000 	.word	0x40022000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3c:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c3e:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c42:	f7ff f993 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin 
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 8001c46:	22f8      	movs	r2, #248	; 0xf8
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001c48:	a911      	add	r1, sp, #68	; 0x44
 8001c4a:	489e      	ldr	r0, [pc, #632]	; (8001ec4 <main+0x548>)
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 8001c4c:	9211      	str	r2, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c4e:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001c52:	f7ff f98b 	bl	8000f6c <HAL_GPIO_Init>
  /*Configure GPIO pin : SPDIF_RX_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8001c56:	2207      	movs	r2, #7
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8001c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8001c5c:	a911      	add	r1, sp, #68	; 0x44
 8001c5e:	489a      	ldr	r0, [pc, #616]	; (8001ec8 <main+0x54c>)
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8001c60:	9215      	str	r2, [sp, #84]	; 0x54
 8001c62:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8001c64:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f7ff f97e 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D1_Pin uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8001c70:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c72:	a911      	add	r1, sp, #68	; 0x44
 8001c74:	4894      	ldr	r0, [pc, #592]	; (8001ec8 <main+0x54c>)
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8001c76:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001c7e:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c82:	f7ff f973 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8001c86:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c88:	a911      	add	r1, sp, #68	; 0x44
 8001c8a:	4890      	ldr	r0, [pc, #576]	; (8001ecc <main+0x550>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8001c8c:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8e:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c92:	f7ff f96b 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8001c96:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001c98:	a911      	add	r1, sp, #68	; 0x44
 8001c9a:	488c      	ldr	r0, [pc, #560]	; (8001ecc <main+0x550>)
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8001c9c:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001ca4:	9715      	str	r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001ca6:	f7ff f961 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8001caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001cae:	a911      	add	r1, sp, #68	; 0x44
 8001cb0:	4887      	ldr	r0, [pc, #540]	; (8001ed0 <main+0x554>)
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8001cb2:	9311      	str	r3, [sp, #68]	; 0x44
 8001cb4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cb6:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cba:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	f7ff f954 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin 
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin 
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8001cc4:	f64f 013f 	movw	r1, #63551	; 0xf83f
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cc8:	4882      	ldr	r0, [pc, #520]	; (8001ed4 <main+0x558>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8001ccc:	9111      	str	r1, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cce:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cd4:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cd8:	f7ff f948 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_TX_Pin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8001cdc:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8001cde:	a911      	add	r1, sp, #68	; 0x44
 8001ce0:	487a      	ldr	r0, [pc, #488]	; (8001ecc <main+0x550>)
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8001ce2:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ce4:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ce8:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f7ff f93d 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : D23_Pin D21_Pin D22_Pin FMC_SDNME_Pin 
                           FMC_SDNE0_Pin FMC_SDCKE0_Pin D20_Pin FMC_D_7_Pin 
                           FMC_D19_Pin FMC_D16_Pin FMC_D18_Pin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 8001cf2:	f64f 712c 	movw	r1, #65324	; 0xff2c
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cf6:	4878      	ldr	r0, [pc, #480]	; (8001ed8 <main+0x55c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 8001cfa:	9111      	str	r1, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cfc:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d02:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d06:	f7ff f931 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d0e:	9a00      	ldr	r2, [sp, #0]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001d10:	486f      	ldr	r0, [pc, #444]	; (8001ed0 <main+0x554>)
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001d12:	9111      	str	r1, [sp, #68]	; 0x44
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001d14:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d16:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f7ff f925 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d22:	f44f 7100 	mov.w	r1, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d26:	9a00      	ldr	r2, [sp, #0]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d28:	4869      	ldr	r0, [pc, #420]	; (8001ed0 <main+0x554>)
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d2a:	9111      	str	r1, [sp, #68]	; 0x44
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d2c:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d2e:	9215      	str	r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f7ff f919 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001d3a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001d3c:	a911      	add	r1, sp, #68	; 0x44
 8001d3e:	4867      	ldr	r0, [pc, #412]	; (8001edc <main+0x560>)
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001d40:	9311      	str	r3, [sp, #68]	; 0x44
 8001d42:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d4a:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001d4e:	f7ff f90d 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8001d52:	f44f 7280 	mov.w	r2, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d56:	a911      	add	r1, sp, #68	; 0x44
 8001d58:	4861      	ldr	r0, [pc, #388]	; (8001ee0 <main+0x564>)
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8001d5a:	9211      	str	r2, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d62:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d64:	f7ff f902 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_RX_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8001d68:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6a:	a911      	add	r1, sp, #68	; 0x44
 8001d6c:	485c      	ldr	r0, [pc, #368]	; (8001ee0 <main+0x564>)
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8001d6e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d70:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d74:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7a:	f7ff f8f7 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d7e:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d80:	a911      	add	r1, sp, #68	; 0x44
 8001d82:	4855      	ldr	r0, [pc, #340]	; (8001ed8 <main+0x55c>)
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d84:	9211      	str	r2, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d8c:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f7ff f8ec 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001d94:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001d96:	a911      	add	r1, sp, #68	; 0x44
 8001d98:	484b      	ldr	r0, [pc, #300]	; (8001ec8 <main+0x54c>)
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001d9a:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001d9c:	2306      	movs	r3, #6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001da0:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f7ff f8e1 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8001daa:	2248      	movs	r2, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dac:	a911      	add	r1, sp, #68	; 0x44
 8001dae:	4846      	ldr	r0, [pc, #280]	; (8001ec8 <main+0x54c>)
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8001db0:	9211      	str	r2, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db2:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001db6:	f7ff f8d9 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8001dba:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8001dbc:	a911      	add	r1, sp, #68	; 0x44
 8001dbe:	4845      	ldr	r0, [pc, #276]	; (8001ed4 <main+0x558>)
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8001dc0:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001dc8:	9715      	str	r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f7ff f8cf 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8001dce:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	a911      	add	r1, sp, #68	; 0x44
 8001dd2:	4840      	ldr	r0, [pc, #256]	; (8001ed4 <main+0x558>)
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8001dd4:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001ddc:	9715      	str	r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f7ff f8c5 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001de2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001de6:	a911      	add	r1, sp, #68	; 0x44
 8001de8:	483a      	ldr	r0, [pc, #232]	; (8001ed4 <main+0x558>)
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001dea:	9211      	str	r2, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dec:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001df0:	f7ff f8bc 	bl	8000f6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001df4:	a911      	add	r1, sp, #68	; 0x44
 8001df6:	483a      	ldr	r0, [pc, #232]	; (8001ee0 <main+0x564>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001df8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e02:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001e06:	f7ff f8b1 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e0a:	2232      	movs	r2, #50	; 0x32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0c:	a911      	add	r1, sp, #68	; 0x44
 8001e0e:	4834      	ldr	r0, [pc, #208]	; (8001ee0 <main+0x564>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e10:	9211      	str	r2, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e16:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e18:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1c:	f7ff f8a6 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001e20:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001e22:	a911      	add	r1, sp, #68	; 0x44
 8001e24:	482f      	ldr	r0, [pc, #188]	; (8001ee4 <main+0x568>)
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001e26:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e28:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e2c:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001e32:	f7ff f89b 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SCL_Pin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8001e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	a911      	add	r1, sp, #68	; 0x44
 8001e3c:	4823      	ldr	r0, [pc, #140]	; (8001ecc <main+0x550>)
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8001e3e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e40:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e42:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e46:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001e48:	2304      	movs	r3, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001e4c:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f7ff f88d 	bl	8000f6c <HAL_GPIO_Init>
  /*Configure GPIO pin : QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e52:	2309      	movs	r3, #9
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8001e54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001e58:	a911      	add	r1, sp, #68	; 0x44
 8001e5a:	481c      	ldr	r0, [pc, #112]	; (8001ecc <main+0x550>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e5c:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8001e5e:	9211      	str	r2, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	9714      	str	r7, [sp, #80]	; 0x50
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f7ff f881 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e6a:	2286      	movs	r2, #134	; 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	a911      	add	r1, sp, #68	; 0x44
 8001e6e:	4818      	ldr	r0, [pc, #96]	; (8001ed0 <main+0x554>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e70:	9211      	str	r2, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e78:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f7ff f876 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <main+0x56c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001e82:	a911      	add	r1, sp, #68	; 0x44
 8001e84:	4812      	ldr	r0, [pc, #72]	; (8001ed0 <main+0x554>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e86:	9212      	str	r2, [sp, #72]	; 0x48
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001e88:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f7ff f86d 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_TX_Pin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8001e92:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8001e94:	a911      	add	r1, sp, #68	; 0x44
 8001e96:	480d      	ldr	r0, [pc, #52]	; (8001ecc <main+0x550>)
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8001e98:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ea0:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	f7ff f862 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001ea8:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	a911      	add	r1, sp, #68	; 0x44
 8001eac:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <main+0x55c>)
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001eae:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb0:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f7ff f85a 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001eb8:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	a911      	add	r1, sp, #68	; 0x44
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <main+0x554>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001ebe:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	9512      	str	r5, [sp, #72]	; 0x48
 8001ec2:	e013      	b.n	8001eec <main+0x570>
 8001ec4:	40022800 	.word	0x40022800
 8001ec8:	40021800 	.word	0x40021800
 8001ecc:	40020c00 	.word	0x40020c00
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40021400 	.word	0x40021400
 8001ed8:	40021c00 	.word	0x40021c00
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	10110000 	.word	0x10110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ef0:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	f7ff f83a 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001ef8:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001efa:	a911      	add	r1, sp, #68	; 0x44
 8001efc:	483e      	ldr	r0, [pc, #248]	; (8001ff8 <main+0x67c>)
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001efe:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001f00:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001f04:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f7ff f82f 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001f0e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	a911      	add	r1, sp, #68	; 0x44
 8001f14:	4839      	ldr	r0, [pc, #228]	; (8001ffc <main+0x680>)
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001f16:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f18:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f1c:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f7ff f823 	bl	8000f6c <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f26:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f28:	4622      	mov	r2, r4
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f32:	6333      	str	r3, [r6, #48]	; 0x30
 8001f34:	6b33      	ldr	r3, [r6, #48]	; 0x30
  htim6.Instance = TIM6;
 8001f36:	4e32      	ldr	r6, [pc, #200]	; (8002000 <main+0x684>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3c:	9302      	str	r3, [sp, #8]
 8001f3e:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f40:	f7fe fe1c 	bl	8000b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f44:	2038      	movs	r0, #56	; 0x38
 8001f46:	f7fe fe51 	bl	8000bec <HAL_NVIC_EnableIRQ>
  htim6.Init.Prescaler = 6249;
 8001f4a:	f641 0369 	movw	r3, #6249	; 0x1869
 8001f4e:	4a2d      	ldr	r2, [pc, #180]	; (8002004 <main+0x688>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f50:	4630      	mov	r0, r6
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f52:	60b4      	str	r4, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f54:	61b4      	str	r4, [r6, #24]
  htim6.Init.Prescaler = 6249;
 8001f56:	e886 000c 	stmia.w	r6, {r2, r3}
  htim6.Init.Period = 100;
 8001f5a:	2364      	movs	r3, #100	; 0x64
 8001f5c:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f5e:	f7ff fc7f 	bl	8001860 <HAL_TIM_Base_Init>
 8001f62:	b100      	cbz	r0, 8001f66 <main+0x5ea>
 8001f64:	e7fe      	b.n	8001f64 <main+0x5e8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f66:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f68:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f6a:	a911      	add	r1, sp, #68	; 0x44
 8001f6c:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f6e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f70:	f7ff fc90 	bl	8001894 <HAL_TIMEx_MasterConfigSynchronization>
 8001f74:	b100      	cbz	r0, 8001f78 <main+0x5fc>
 8001f76:	e7fe      	b.n	8001f76 <main+0x5fa>
  hadc1.Instance = ADC1;
 8001f78:	4c23      	ldr	r4, [pc, #140]	; (8002008 <main+0x68c>)
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <main+0x690>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f7c:	6060      	str	r0, [r4, #4]
  hadc1.Instance = ADC1;
 8001f7e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIG_EDGE_RISING;
 8001f80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f84:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIG_EDGE_RISING;
 8001f86:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG0_T6_TRGO;
 8001f88:	f04f 6350 	mov.w	r3, #218103808	; 0xd000000
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f8c:	61a0      	str	r0, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f8e:	6220      	str	r0, [r4, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f90:	60e0      	str	r0, [r4, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f92:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f94:	f8c4 8010 	str.w	r8, [r4, #16]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG0_T6_TRGO;
 8001f98:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 2;
 8001f9a:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f9c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fa0:	f8c4 8014 	str.w	r8, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fa4:	f7fe fb12 	bl	80005cc <HAL_ADC_Init>
 8001fa8:	b100      	cbz	r0, 8001fac <main+0x630>
 8001faa:	e7fe      	b.n	8001faa <main+0x62e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001fac:	a916      	add	r1, sp, #88	; 0x58
 8001fae:	f841 0d20 	str.w	r0, [r1, #-32]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7fe fda8 	bl	8000b08 <HAL_ADCEx_MultiModeConfigChannel>
 8001fb8:	b100      	cbz	r0, 8001fbc <main+0x640>
 8001fba:	e7fe      	b.n	8001fba <main+0x63e>
  sConfig.Channel = ADC_CHANNEL_6;
 8001fbc:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fbe:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fc0:	a911      	add	r1, sp, #68	; 0x44
 8001fc2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 8001fc4:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fc6:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fca:	f7fe fcfb 	bl	80009c4 <HAL_ADC_ConfigChannel>
 8001fce:	b100      	cbz	r0, 8001fd2 <main+0x656>
 8001fd0:	e7fe      	b.n	8001fd0 <main+0x654>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001fd2:	a911      	add	r1, sp, #68	; 0x44
 8001fd4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_12;
 8001fd6:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001fda:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001fdc:	f7fe fcf2 	bl	80009c4 <HAL_ADC_ConfigChannel>
 8001fe0:	b100      	cbz	r0, 8001fe4 <main+0x668>
 8001fe2:	e7fe      	b.n	8001fe2 <main+0x666>
  HAL_TIM_Base_Start(&htim6);
 8001fe4:	4630      	mov	r0, r6
 8001fe6:	f7ff fb11 	bl	800160c <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value_adc, 2);
 8001fea:	462a      	mov	r2, r5
 8001fec:	4908      	ldr	r1, [pc, #32]	; (8002010 <main+0x694>)
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7fe fb90 	bl	8000714 <HAL_ADC_Start_DMA>
 8001ff4:	e7fe      	b.n	8001ff4 <main+0x678>
 8001ff6:	bf00      	nop
 8001ff8:	40021c00 	.word	0x40021c00
 8001ffc:	40020400 	.word	0x40020400
 8002000:	200000d8 	.word	0x200000d8
 8002004:	40001000 	.word	0x40001000
 8002008:	20000030 	.word	0x20000030
 800200c:	40012000 	.word	0x40012000
 8002010:	20000028 	.word	0x20000028

08002014 <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002014:	4770      	bx	lr

08002016 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002016:	e7fe      	b.n	8002016 <_Error_Handler>

08002018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201a:	2003      	movs	r0, #3
 800201c:	f7fe fd9c 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	f06f 000b 	mvn.w	r0, #11
 8002026:	4611      	mov	r1, r2
 8002028:	f7fe fda8 	bl	8000b7c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	f06f 000a 	mvn.w	r0, #10
 8002032:	4611      	mov	r1, r2
 8002034:	f7fe fda2 	bl	8000b7c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	f06f 0009 	mvn.w	r0, #9
 800203e:	4611      	mov	r1, r2
 8002040:	f7fe fd9c 	bl	8000b7c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002044:	2200      	movs	r2, #0
 8002046:	f06f 0004 	mvn.w	r0, #4
 800204a:	4611      	mov	r1, r2
 800204c:	f7fe fd96 	bl	8000b7c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	f06f 0003 	mvn.w	r0, #3
 8002056:	4611      	mov	r1, r2
 8002058:	f7fe fd90 	bl	8000b7c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	f06f 0001 	mvn.w	r0, #1
 8002062:	4611      	mov	r1, r2
 8002064:	f7fe fd8a 	bl	8000b7c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	f04f 30ff 	mov.w	r0, #4294967295
 800206e:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002070:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002074:	f7fe bd82 	b.w	8000b7c <HAL_NVIC_SetPriority>

08002078 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002078:	6802      	ldr	r2, [r0, #0]
 800207a:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_ADC_MspInit+0xa0>)
 800207c:	429a      	cmp	r2, r3
{
 800207e:	b570      	push	{r4, r5, r6, lr}
 8002080:	4606      	mov	r6, r0
 8002082:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8002084:	d145      	bne.n	8002112 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002086:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PC2     ------> ADC1_IN12 => ARD_A2
    PA6     ------> ADC1_IN6 => ARD_A0
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208c:	2403      	movs	r4, #3
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 800208e:	4823      	ldr	r0, [pc, #140]	; (800211c <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002096:	645a      	str	r2, [r3, #68]	; 0x44
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800209a:	9402      	str	r4, [sp, #8]
    __HAL_RCC_ADC1_CLK_ENABLE();
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	9503      	str	r5, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 80020a6:	2304      	movs	r3, #4
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 80020a8:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 80020ac:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 80020ae:	f7fe ff5d 	bl	8000f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A0_Pin;
 80020b2:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	481a      	ldr	r0, [pc, #104]	; (8002120 <HAL_ADC_MspInit+0xa8>)
 80020b6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 80020b8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ba:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020be:	f7fe ff55 	bl	8000f6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80020c2:	4c18      	ldr	r4, [pc, #96]	; (8002124 <HAL_ADC_MspInit+0xac>)
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_ADC_MspInit+0xb0>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020c6:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020c8:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ca:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020cc:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80020ce:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d6:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020dc:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e2:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e8:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80020ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ee:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020f0:	f7fe fdc6 	bl	8000c80 <HAL_DMA_Init>
 80020f4:	b118      	cbz	r0, 80020fe <HAL_ADC_MspInit+0x86>
    {
      _Error_Handler(__FILE__, __LINE__);
 80020f6:	2178      	movs	r1, #120	; 0x78
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <HAL_ADC_MspInit+0xb4>)
 80020fa:	f7ff ff8c 	bl	8002016 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002100:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002102:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002104:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002106:	4611      	mov	r1, r2
 8002108:	f7fe fd38 	bl	8000b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800210c:	2012      	movs	r0, #18
 800210e:	f7fe fd6d 	bl	8000bec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002112:	b006      	add	sp, #24
 8002114:	bd70      	pop	{r4, r5, r6, pc}
 8002116:	bf00      	nop
 8002118:	40012000 	.word	0x40012000
 800211c:	40020800 	.word	0x40020800
 8002120:	40020000 	.word	0x40020000
 8002124:	20000078 	.word	0x20000078
 8002128:	40026410 	.word	0x40026410
 800212c:	080022a8 	.word	0x080022a8

08002130 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002130:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <HAL_TIM_Base_MspInit+0x38>)
 8002134:	6802      	ldr	r2, [r0, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d112      	bne.n	8002160 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800213a:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800213e:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002142:	f042 0210 	orr.w	r2, r2, #16
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002148:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800214c:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002156:	f7fe fd11 	bl	8000b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800215a:	2036      	movs	r0, #54	; 0x36
 800215c:	f7fe fd46 	bl	8000bec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002160:	b003      	add	sp, #12
 8002162:	f85d fb04 	ldr.w	pc, [sp], #4
 8002166:	bf00      	nop
 8002168:	40001000 	.word	0x40001000

0800216c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800216c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216e:	f7fe fa1b 	bl	80005a8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002176:	f7fe bd68 	b.w	8000c4a <HAL_SYSTICK_IRQHandler>
	...

0800217c <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800217c:	4801      	ldr	r0, [pc, #4]	; (8002184 <ADC_IRQHandler+0x8>)
 800217e:	f7fe bb81 	b.w	8000884 <HAL_ADC_IRQHandler>
 8002182:	bf00      	nop
 8002184:	20000030 	.word	0x20000030

08002188 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002188:	4801      	ldr	r0, [pc, #4]	; (8002190 <TIM6_DAC_IRQHandler+0x8>)
 800218a:	f7ff ba51 	b.w	8001630 <HAL_TIM_IRQHandler>
 800218e:	bf00      	nop
 8002190:	200000d8 	.word	0x200000d8

08002194 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002194:	4801      	ldr	r0, [pc, #4]	; (800219c <DMA2_Stream0_IRQHandler+0x8>)
 8002196:	f7fe be2f 	b.w	8000df8 <HAL_DMA_IRQHandler>
 800219a:	bf00      	nop
 800219c:	20000078 	.word	0x20000078

080021a0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021a2:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <SystemInit+0x44>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80021ba:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80021c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021c6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <SystemInit+0x48>)
 80021ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021d2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021d4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021da:	608b      	str	r3, [r1, #8]
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000ed00 	.word	0xe000ed00
 80021e4:	40023800 	.word	0x40023800
 80021e8:	24003010 	.word	0x24003010

080021ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002224 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021f2:	e003      	b.n	80021fc <LoopCopyDataInit>

080021f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021fa:	3104      	adds	r1, #4

080021fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021fc:	480b      	ldr	r0, [pc, #44]	; (800222c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002200:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002202:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002204:	d3f6      	bcc.n	80021f4 <CopyDataInit>
  ldr  r2, =_sbss
 8002206:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002208:	e002      	b.n	8002210 <LoopFillZerobss>

0800220a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800220a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800220c:	f842 3b04 	str.w	r3, [r2], #4

08002210 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002212:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002214:	d3f9      	bcc.n	800220a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002216:	f7ff ffc3 	bl	80021a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800221a:	f000 f811 	bl	8002240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221e:	f7ff fbad 	bl	800197c <main>
  bx  lr    
 8002222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002224:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002228:	080022e4 	.word	0x080022e4
  ldr  r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002230:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002234:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002238:	20000118 	.word	0x20000118

0800223c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800223c:	e7fe      	b.n	800223c <BusFault_Handler>
	...

08002240 <__libc_init_array>:
 8002240:	b570      	push	{r4, r5, r6, lr}
 8002242:	4e0d      	ldr	r6, [pc, #52]	; (8002278 <__libc_init_array+0x38>)
 8002244:	4c0d      	ldr	r4, [pc, #52]	; (800227c <__libc_init_array+0x3c>)
 8002246:	1ba4      	subs	r4, r4, r6
 8002248:	10a4      	asrs	r4, r4, #2
 800224a:	2500      	movs	r5, #0
 800224c:	42a5      	cmp	r5, r4
 800224e:	d109      	bne.n	8002264 <__libc_init_array+0x24>
 8002250:	4e0b      	ldr	r6, [pc, #44]	; (8002280 <__libc_init_array+0x40>)
 8002252:	4c0c      	ldr	r4, [pc, #48]	; (8002284 <__libc_init_array+0x44>)
 8002254:	f000 f818 	bl	8002288 <_init>
 8002258:	1ba4      	subs	r4, r4, r6
 800225a:	10a4      	asrs	r4, r4, #2
 800225c:	2500      	movs	r5, #0
 800225e:	42a5      	cmp	r5, r4
 8002260:	d105      	bne.n	800226e <__libc_init_array+0x2e>
 8002262:	bd70      	pop	{r4, r5, r6, pc}
 8002264:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002268:	4798      	blx	r3
 800226a:	3501      	adds	r5, #1
 800226c:	e7ee      	b.n	800224c <__libc_init_array+0xc>
 800226e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002272:	4798      	blx	r3
 8002274:	3501      	adds	r5, #1
 8002276:	e7f2      	b.n	800225e <__libc_init_array+0x1e>
 8002278:	080022dc 	.word	0x080022dc
 800227c:	080022dc 	.word	0x080022dc
 8002280:	080022dc 	.word	0x080022dc
 8002284:	080022e0 	.word	0x080022e0

08002288 <_init>:
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	bf00      	nop
 800228c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228e:	bc08      	pop	{r3}
 8002290:	469e      	mov	lr, r3
 8002292:	4770      	bx	lr

08002294 <_fini>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	bf00      	nop
 8002298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229a:	bc08      	pop	{r3}
 800229c:	469e      	mov	lr, r3
 800229e:	4770      	bx	lr
